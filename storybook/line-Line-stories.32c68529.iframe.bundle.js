"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[718],{"./stories/line/Line.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AddingMarkers:()=>AddingMarkers,AreaGradients:()=>AreaGradients,CustomLayers:()=>CustomLayers,CustomLineStyle:()=>CustomLineStyle,CustomMinMaxY:()=>CustomMinMaxY,CustomPointSymbol:()=>CustomPointSymbol,CustomTooltip:()=>CustomTooltip,DifferentSeriesLength:()=>DifferentSeriesLength,FormattingAxisValues:()=>FormattingAxisValues,FormattingValues:()=>FormattingValues,GrowingLine:()=>GrowingLine,HighlightingNegativeValues:()=>HighlightingNegativeValues,HolesInData:()=>HolesInData,LinearScale:()=>LinearScale,LogarithmicScale:()=>LogarithmicScale,NonLinearValues:()=>NonLinearValues,RealTimeChart:()=>RealTimeChart,StackedLines:()=>StackedLines,SymmetricLogarithmicScale:()=>SymmetricLogarithmicScale,TimeScale:()=>TimeScale,TimeScaleMillisecondsPrecision:()=>TimeScaleMillisecondsPrecision,UsingDataColors:()=>UsingDataColors,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),lodash_range__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/range.js"),lodash_range__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(lodash_range__WEBPACK_IMPORTED_MODULE_1__),lodash_last__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/last.js"),lodash_last__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(lodash_last__WEBPACK_IMPORTED_MODULE_2__),_nivo_generators__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../packages/generators/dist/nivo-generators.es.js"),_nivo_core__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../packages/core/dist/nivo-core.es.js"),d3_shape__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("../node_modules/.pnpm/d3-shape@1.3.7/node_modules/d3-shape/src/area.js"),d3_shape__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("../node_modules/.pnpm/d3-shape@1.3.7/node_modules/d3-shape/src/curve/monotone.js"),d3_time__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("../node_modules/.pnpm/d3-time@1.1.0/node_modules/d3-time/src/minute.js"),d3_time_format__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("../node_modules/.pnpm/d3-time-format@3.0.0/node_modules/d3-time-format/src/defaultLocale.js"),_nivo_line__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../packages/line/dist/nivo-line.es.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Line",component:_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,tags:["autodocs"],argTypes:{curve:{control:"select",options:["linear","monotoneX","step","stepBefore","stepAfter"]}},args:{curve:"monotoneX"}},data=(0,_nivo_generators__WEBPACK_IMPORTED_MODULE_3__.ak)(18),commonProperties={width:900,height:400,margin:{top:20,right:20,bottom:60,left:80},data,animate:!0,enableSlices:"x"},CustomSymbol=({size,color,borderWidth,borderColor})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("g",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("circle",{fill:"#fff",r:size/2,strokeWidth:borderWidth,stroke:borderColor}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("circle",{r:size/5,strokeWidth:borderWidth,stroke:borderColor,fill:color,fillOpacity:.35})]});CustomSymbol.displayName="CustomSymbol";const StackedLines={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,yScale:{type:"linear",stacked:!0},curve:args.curve})},LinearScale={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,curve:"monotoneX",data:[{id:"fake corp. A",data:[{x:0,y:7},{x:1,y:5},{x:2,y:11},{x:3,y:9},{x:4,y:13},{x:7,y:16},{x:9,y:12}]}],xScale:{type:"linear",min:0,max:"auto"},axisLeft:{legend:"linear scale",legendOffset:12},axisBottom:{legend:"linear scale",legendOffset:-12}})},TimeScale={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,data:[{id:"fake corp. A",data:[{x:"2018-01-01",y:7},{x:"2018-01-02",y:5},{x:"2018-01-03",y:11},{x:"2018-01-04",y:9},{x:"2018-01-05",y:12},{x:"2018-01-06",y:16},{x:"2018-01-07",y:13},{x:"2018-01-08",y:13}]},{id:"fake corp. B",data:[{x:"2018-01-04",y:14},{x:"2018-01-05",y:14},{x:"2018-01-06",y:15},{x:"2018-01-07",y:11},{x:"2018-01-08",y:10},{x:"2018-01-09",y:12},{x:"2018-01-10",y:9},{x:"2018-01-11",y:7}]}],xScale:{type:"time",format:"%Y-%m-%d",useUTC:!1,precision:"day"},xFormat:"time:%Y-%m-%d",yScale:{type:"linear"},axisLeft:{legend:"linear scale",legendOffset:12},axisBottom:{format:"%b %d",tickValues:"every 2 days",legend:"time scale",legendOffset:-12},curve:args.curve,enablePointLabel:!0,pointSymbol:CustomSymbol,pointSize:16,pointBorderWidth:1,pointBorderColor:{from:"color",modifiers:[["darker",.3]]},useMesh:!0,enableSlices:!1})},TimeScaleMillisecondsPrecision={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,data:[{id:"signal A",data:[{x:"2018-01-01 12:00:01.100",y:7},{x:"2018-01-01 12:00:01.110",y:5},{x:"2018-01-01 12:00:01.120",y:11},{x:"2018-01-01 12:00:01.130",y:9},{x:"2018-01-01 12:00:01.140",y:12},{x:"2018-01-01 12:00:01.150",y:16},{x:"2018-01-01 12:00:01.160",y:13},{x:"2018-01-01 12:00:01.170",y:13}]},{id:"signal B",data:[{x:"2018-01-01 12:00:01.100",y:14},{x:"2018-01-01 12:00:01.110",y:14},{x:"2018-01-01 12:00:01.120",y:15},{x:"2018-01-01 12:00:01.130",y:11},{x:"2018-01-01 12:00:01.140",y:10},{x:"2018-01-01 12:00:01.150",y:12},{x:"2018-01-01 12:00:01.160",y:9},{x:"2018-01-01 12:00:01.170",y:7}]}],xScale:{type:"time",format:"%Y-%m-%d %H:%M:%S.%L",useUTC:!1,precision:"millisecond"},xFormat:"time:%Y-%m-%d %H:%M:%S.%L",yScale:{type:"linear"},axisLeft:{legend:"linear scale",legendOffset:12},axisBottom:{format:".%L",tickValues:"every 10 milliseconds",legend:"time scale",legendOffset:-12},curve:args.curve,enablePointLabel:!0,pointSymbol:CustomSymbol,pointSize:16,pointBorderWidth:1,pointBorderColor:{from:"color",modifiers:[["darker",.3]]},useMesh:!0,enableSlices:!1})},LogarithmicScale={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,data:[{id:"fake corp. A",data:[{x:1,y:12},{x:2,y:123},{x:3,y:870},{x:4,y:21e3},{x:7,y:4e5},{x:9,y:1e4},{x:16,y:1e7}]}],gridYValues:[10,100,1e3,1e4,1e5,1e6,1e7],xScale:{type:"log",base:2,max:"auto"},axisBottom:{legend:"logarithmic scale (base: 2)",legendOffset:-12},yScale:{type:"log",base:10,max:"auto"},axisLeft:{tickValues:[10,100,1e3,1e4,1e5,1e6,1e7],legend:"logarithmic scale (base: 10)",legendOffset:12},useMesh:!0,enableSlices:!1})},SymmetricLogarithmicScale={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,data:[{id:"fake corp. A",data:[{x:1,y:-12},{x:2,y:123},{x:3,y:870},{x:4,y:210},{x:7,y:400},{x:9,y:100},{x:16,y:1e3}]}],xScale:{type:"linear",max:"auto"},yScale:{type:"symlog",max:"auto"},axisLeft:{tickValues:[0,100,250,500,1e3],legend:"symmetric logarithmic scale",legendOffset:12},useMesh:!0,enableSlices:!1})};class RealTimeChartComponent extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props);const date=new Date;date.setMinutes(0),date.setSeconds(0),date.setMilliseconds(0),this.state={dataA:lodash_range__WEBPACK_IMPORTED_MODULE_1___default()(100).map((i=>({x:d3_time__WEBPACK_IMPORTED_MODULE_7__.Z.offset(date,30*i),y:10+Math.round(20*Math.random())}))),dataB:lodash_range__WEBPACK_IMPORTED_MODULE_1___default()(100).map((i=>({x:d3_time__WEBPACK_IMPORTED_MODULE_7__.Z.offset(date,30*i),y:30+Math.round(20*Math.random())}))),dataC:lodash_range__WEBPACK_IMPORTED_MODULE_1___default()(100).map((i=>({x:d3_time__WEBPACK_IMPORTED_MODULE_7__.Z.offset(date,30*i),y:60+Math.round(20*Math.random())})))},this.formatTime=(0,d3_time_format__WEBPACK_IMPORTED_MODULE_8__.i$)("%Y %b %d")}componentDidMount(){this.timer=setInterval(this.next,100)}componentWillUnmount(){clearInterval(this.timer)}next=()=>{const dataA=this.state.dataA.slice(1);dataA.push({x:d3_time__WEBPACK_IMPORTED_MODULE_7__.Z.offset(lodash_last__WEBPACK_IMPORTED_MODULE_2___default()(dataA).x,30),y:10+Math.round(20*Math.random())});const dataB=this.state.dataB.slice(1);dataB.push({x:d3_time__WEBPACK_IMPORTED_MODULE_7__.Z.offset(lodash_last__WEBPACK_IMPORTED_MODULE_2___default()(dataB).x,30),y:30+Math.round(20*Math.random())});const dataC=this.state.dataC.slice(1);dataC.push({x:d3_time__WEBPACK_IMPORTED_MODULE_7__.Z.offset(lodash_last__WEBPACK_IMPORTED_MODULE_2___default()(dataC).x,30),y:60+Math.round(20*Math.random())}),this.setState({dataA,dataB,dataC})};render(){const{dataA,dataB,dataC}=this.state;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,margin:{top:30,right:50,bottom:60,left:50},data:[{id:"A",data:dataA},{id:"B",data:dataB},{id:"C",data:dataC}],xScale:{type:"time",format:"native"},yScale:{type:"linear",max:100},axisTop:{format:"%H:%M",tickValues:"every 4 hours"},axisBottom:{format:"%H:%M",tickValues:"every 4 hours",legend:`${this.formatTime(dataA[0].x)} ——— ${this.formatTime(lodash_last__WEBPACK_IMPORTED_MODULE_2___default()(dataA).x)}`,legendPosition:"middle",legendOffset:46},axisRight:{},enablePoints:!1,enableGridX:!0,curve:"monotoneX",animate:!1,motionStiffness:120,motionDamping:50,isInteractive:!1,enableSlices:!1,useMesh:!0,theme:{axis:{ticks:{text:{fontSize:14}}},grid:{line:{stroke:"#ddd",strokeDasharray:"1 2"}}}})}}RealTimeChartComponent.displayName="RealTimeChartComponent";const RealTimeChart={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(RealTimeChartComponent,{})},GrowingLineComponent=()=>{const[points,setPoints]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([{x:0,y:50}]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{101!==points.length&&setTimeout((()=>{setPoints((p=>{const prev=p[p.length-1];return[...p,{x:prev.x+1,y:Math.max(Math.min(prev.y+10*Math.random()-5,100),0)}]}))}),300)}),[points,setPoints]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,yScale:{type:"linear",min:0,max:"auto"},xScale:{type:"linear",min:0,max:"auto"},data:[{id:"serie",data:points}],axisBottom:{tickValues:4},axisLeft:{tickValues:4},isInteractive:!1,animate:!1,enableArea:!0})};GrowingLineComponent.displayName="GrowingLineComponent";const GrowingLine={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(GrowingLineComponent,{})},CustomPointSymbol={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,yScale:{type:"linear"},curve:args.curve,pointSymbol:CustomSymbol,pointSize:16,pointBorderWidth:1,pointBorderColor:{from:"color",modifiers:[["darker",.3]]},axisLeft:{tickSize:10}})},UsingDataColors={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,yScale:{type:"linear",stacked:!0},curve:"linear",colors:{datum:"color"},enablePointLabel:!0,pointSize:10,pointBorderColor:{theme:"background"},pointBorderWidth:2,enableSlices:!1,useMesh:!0})},AddingMarkers={args:{curve:"catmullRom"},render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,yScale:{type:"linear"},curve:args.curve,markers:[{axis:"y",value:100,lineStyle:{stroke:"#b0413e",strokeWidth:2},legend:"y marker",legendOrientation:"vertical"},{axis:"x",value:data[0].data[5].x,lineStyle:{stroke:"#b0413e",strokeWidth:2},legend:"x marker"}]})},HolesInData={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,data:[{id:"fake corp. A",data:[4,8,5,null,2,1,4,null,8,9,5].map(((y,i)=>({x:`#${i}`,y})))},{id:"fake corp. B",data:[5,9,8,6,3,1,2,null,5,8,4].map(((y,i)=>({x:`#${i}`,y})))}],yScale:{type:"linear"},curve:args.curve,pointSize:8,pointBorderColor:"#fff",pointBorderWidth:2})},DifferentSeriesLength={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,data:[{id:"fake corp. A",data:[{x:0,y:7},{x:1,y:5},{x:2,y:11},{x:3,y:12},{x:4,y:13},{x:5,y:null},{x:6,y:18},{x:7,y:16},{x:8,y:8},{x:9,y:10},{x:10,y:9}]},{id:"fake corp. B",data:[{x:3,y:14},{x:4,y:16},{x:5,y:19},{x:6,y:20},{x:7,y:18}]}],xScale:{type:"linear",min:0,max:"auto"},yScale:{type:"linear"},curve:"monotoneX"})},CustomMinMaxY={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,markers:[{axis:"y",value:0,lineStyle:{stroke:"#b0413e",strokeWidth:1},legend:"y marker at 0",legendPosition:"bottom-left"}],data:[{id:"fake corp. A",data:[.5,.6,.8,.7,.8,.5,.2,.3,.4,.5,.5,.1,-.2,-.6,-.1,0,.1,-.1,-.4,-.6,-.5,.2,.5,.6,.6].map(((y,i)=>({x:`#${i}`,y})))},{id:"fake corp. B",data:[.9,.5,.6,.5,.4,.3,-.1,-.5,-.4,-.4,-.1,-.3,-.2,.1,.1,.3,.4,.5,.4,.6,.5,.7,.8,.4,.3].map(((y,i)=>({x:`#${i}`,y})))}],curve:args.curve,pointSize:8,pointBorderColor:"#fff",pointBorderWidth:2,yScale:{type:"linear",min:-1,max:1}})},NonLinearValues={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,xScale:{type:"linear",min:0,max:12},yScale:{type:"linear",min:0,max:11},colors:"black",curve:"linear",animate:!1,lineWidth:4,pointSize:8,pointColor:"white",pointBorderColor:{from:"serieColor"},pointBorderWidth:2,enableSlices:!1,useMesh:!0,debugMesh:!0,data:[{id:"nivo",data:[{x:1,y:1},{x:1,y:10},{x:2.25,y:10},{x:3,y:4},{x:3,y:10},{x:4,y:10},{x:4,y:1},{x:2.75,y:1},{x:2,y:7},{x:2,y:1},{x:1,y:1},{x:null,y:null},{x:4.5,y:1},{x:5.5,y:1},{x:5.5,y:10},{x:4.5,y:10},{x:4.5,y:1},{x:null,y:null},{x:6.5,y:1},{x:7.5,y:1},{x:8.5,y:10},{x:7.5,y:10},{x:7,y:4},{x:6.5,y:10},{x:5.5,y:10},{x:6.5,y:1},{x:null,y:null},{x:9.5,y:1},{x:10.5,y:1},{x:11.5,y:3},{x:11.5,y:8},{x:10.5,y:10},{x:9.5,y:10},{x:8.5,y:8},{x:8.5,y:3},{x:9.5,y:1},{x:null,y:null},{x:9.5,y:4},{x:10.5,y:4},{x:10.5,y:7},{x:9.5,y:7},{x:9.5,y:4}]}]})},HighlightingNegativeValues={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,data:[{id:"positive :)",data:[{x:0,y:.7},{x:1,y:.9},{x:2,y:.8},{x:3,y:.6},{x:4,y:.3},{x:5,y:0},{x:6,y:null},{x:7,y:null},{x:8,y:null},{x:9,y:null},{x:10,y:null},{x:11,y:0},{x:12,y:.4},{x:13,y:.6},{x:14,y:.5},{x:15,y:.3},{x:16,y:.4},{x:17,y:0}]},{id:"negative :(",data:[{x:5,y:0},{x:6,y:-.3},{x:7,y:-.5},{x:8,y:-.9},{x:9,y:-.2},{x:10,y:-.4},{x:11,y:0},{x:12,y:null},{x:13,y:null},{x:14,y:null},{x:15,y:null},{x:16,y:null},{x:17,y:0},{x:18,y:-.4},{x:19,y:-.2},{x:20,y:-.1},{x:21,y:-.6}]}],curve:args.curve,enablePointLabel:!0,pointSymbol:CustomSymbol,pointSize:14,pointBorderWidth:1,pointBorderColor:{from:"color",modifiers:[["darker",.3]]},pointLabelYOffset:-20,enableGridX:!1,colors:["rgb(97, 205, 187)","rgb(244, 117, 96)"],xScale:{type:"linear"},yScale:{type:"linear",stacked:!1,min:-1,max:1},enableArea:!0,areaOpacity:.07,enableSlices:!1,useMesh:!0,crosshairType:"cross"})},FormattingAxisValues={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,curve:args.curve,yScale:{type:"linear"},axisLeft:{format:value=>`${Number(value).toLocaleString("ru-RU",{minimumFractionDigits:2})} ₽`}})},FormattingValues={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,curve:args.curve,yScale:{type:"linear"},yFormat:value=>`${Number(value).toLocaleString("ru-RU",{minimumFractionDigits:2})} ₽`})},CustomTooltip={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,enableSlices:"x",curve:args.curve,yScale:{type:"linear"},sliceTooltip:({slice})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("div",{style:{background:"white",padding:"9px 12px",border:"1px solid #ccc"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("div",{children:["x: ",slice.id]}),slice.points.map((point=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("div",{style:{color:point.serieColor,padding:"3px 0"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("strong",{children:point.serieId})," [",point.data.yFormatted,"]"]},point.id)))]})})},AreaLayer=({series,xScale,yScale,innerHeight})=>{const areaGenerator=(0,d3_shape__WEBPACK_IMPORTED_MODULE_9__.Z)().x((d=>xScale(d.data.x))).y0((d=>Math.min(innerHeight,yScale(d.data.y-40)))).y1((d=>yScale(d.data.y+10))).curve(d3_shape__WEBPACK_IMPORTED_MODULE_10__.Z);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_core__WEBPACK_IMPORTED_MODULE_4__.eP,{defs:[{id:"pattern",type:"patternLines",background:"transparent",color:"#3daff7",lineWidth:1,spacing:6,rotation:-45}]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("path",{d:areaGenerator(series[0].data),fill:"url(#pattern)",fillOpacity:.6,stroke:"#3daff7",strokeWidth:2})]})},CustomLayers={args:{curve:"linear"},render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,yScale:{type:"linear",stacked:!0},data:commonProperties.data.filter((d=>["rhum","whisky"].includes(d.id))),lineWidth:3,curve:args.curve,colors:["#028ee6","#774dd7"],enableGridX:!1,pointSize:12,pointColor:"white",pointBorderWidth:2,pointBorderColor:{from:"serieColor"},layers:["grid","markers","areas",AreaLayer,"lines","slices","axes","points","legends"],theme:{crosshair:{line:{strokeWidth:2,stroke:"#774dd7",strokeOpacity:1}}}})},styleById={cognac:{strokeDasharray:"12, 6",strokeWidth:2},vodka:{strokeDasharray:"1, 16",strokeWidth:8,strokeLinejoin:"round",strokeLinecap:"round"},rhum:{strokeDasharray:"6, 6",strokeWidth:4},default:{strokeWidth:1}},DashedLine=({series,lineGenerator,xScale,yScale})=>series.map((({id,data,color})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("path",{d:lineGenerator(data.map((d=>({x:xScale(d.data.x),y:yScale(d.data.y)})))),fill:"none",stroke:color,style:styleById[id]||styleById.default},id))),CustomLineStyle={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,xScale:{type:"point",min:"auto",max:"auto"},yScale:{type:"linear",min:"auto",max:"auto"},axisBottom:{orient:"bottom",tickSize:5,tickPadding:5,tickRotation:0},axisLeft:{orient:"left",tickSize:5,tickPadding:5,tickRotation:0},layers:["grid","markers","areas",DashedLine,"slices","points","axes","legends"]})},AreaGradients={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_5__.x1,{...commonProperties,enableArea:!0,yScale:{type:"linear",stacked:!0},curve:args.curve,defs:[(0,_nivo_core__WEBPACK_IMPORTED_MODULE_4__.c$)("gradientA",[{offset:0,color:"inherit"},{offset:100,color:"inherit",opacity:0}])],fill:[{match:"*",id:"gradientA"}]})};StackedLines.parameters={...StackedLines.parameters,docs:{...StackedLines.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} yScale={{\n    type: 'linear',\n    stacked: true\n  }} curve={args.curve} />\n}",...StackedLines.parameters?.docs?.source},description:{story:"You can stack lines using the \\`yScale.stacked\\` property.\nPlease note that stacking is only supported for linear scales.",...StackedLines.parameters?.docs?.description}}},LinearScale.parameters={...LinearScale.parameters,docs:{...LinearScale.parameters?.docs,source:{originalSource:"{\n  render: () => <Line {...commonProperties} curve=\"monotoneX\" data={[{\n    id: 'fake corp. A',\n    data: [{\n      x: 0,\n      y: 7\n    }, {\n      x: 1,\n      y: 5\n    }, {\n      x: 2,\n      y: 11\n    }, {\n      x: 3,\n      y: 9\n    }, {\n      x: 4,\n      y: 13\n    }, {\n      x: 7,\n      y: 16\n    }, {\n      x: 9,\n      y: 12\n    }]\n  }]} xScale={{\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  }} axisLeft={{\n    legend: 'linear scale',\n    legendOffset: 12\n  }} axisBottom={{\n    legend: 'linear scale',\n    legendOffset: -12\n  }} />\n}",...LinearScale.parameters?.docs?.source},description:{story:"By default, \\`xScale\\` is a point scale, but you can switch to linear using\nthe \\`xScale.type\\` property. It supports irregular intervals while \\`point\\`\nscale doesn't.\n\nIf you want missing datums to appear as holes instead of connecting defined ones,\nyou should set their y value to \\`null\\`.",...LinearScale.parameters?.docs?.description}}},TimeScale.parameters={...TimeScale.parameters,docs:{...TimeScale.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} data={[{\n    id: 'fake corp. A',\n    data: [{\n      x: '2018-01-01',\n      y: 7\n    }, {\n      x: '2018-01-02',\n      y: 5\n    }, {\n      x: '2018-01-03',\n      y: 11\n    }, {\n      x: '2018-01-04',\n      y: 9\n    }, {\n      x: '2018-01-05',\n      y: 12\n    }, {\n      x: '2018-01-06',\n      y: 16\n    }, {\n      x: '2018-01-07',\n      y: 13\n    }, {\n      x: '2018-01-08',\n      y: 13\n    }]\n  }, {\n    id: 'fake corp. B',\n    data: [{\n      x: '2018-01-04',\n      y: 14\n    }, {\n      x: '2018-01-05',\n      y: 14\n    }, {\n      x: '2018-01-06',\n      y: 15\n    }, {\n      x: '2018-01-07',\n      y: 11\n    }, {\n      x: '2018-01-08',\n      y: 10\n    }, {\n      x: '2018-01-09',\n      y: 12\n    }, {\n      x: '2018-01-10',\n      y: 9\n    }, {\n      x: '2018-01-11',\n      y: 7\n    }]\n  }]} xScale={{\n    type: 'time',\n    format: '%Y-%m-%d',\n    useUTC: false,\n    precision: 'day'\n  }} xFormat=\"time:%Y-%m-%d\" yScale={{\n    type: 'linear'\n    // stacked: boolean('stacked', false),\n  }} axisLeft={{\n    legend: 'linear scale',\n    legendOffset: 12\n  }} axisBottom={{\n    format: '%b %d',\n    tickValues: 'every 2 days',\n    legend: 'time scale',\n    legendOffset: -12\n  }} curve={args.curve} enablePointLabel={true} pointSymbol={CustomSymbol} pointSize={16} pointBorderWidth={1} pointBorderColor={{\n    from: 'color',\n    modifiers: [['darker', 0.3]]\n  }} useMesh={true} enableSlices={false} />\n}",...TimeScale.parameters?.docs?.source}}},TimeScaleMillisecondsPrecision.parameters={...TimeScaleMillisecondsPrecision.parameters,docs:{...TimeScaleMillisecondsPrecision.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} data={[{\n    id: 'signal A',\n    data: [{\n      x: '2018-01-01 12:00:01.100',\n      y: 7\n    }, {\n      x: '2018-01-01 12:00:01.110',\n      y: 5\n    }, {\n      x: '2018-01-01 12:00:01.120',\n      y: 11\n    }, {\n      x: '2018-01-01 12:00:01.130',\n      y: 9\n    }, {\n      x: '2018-01-01 12:00:01.140',\n      y: 12\n    }, {\n      x: '2018-01-01 12:00:01.150',\n      y: 16\n    }, {\n      x: '2018-01-01 12:00:01.160',\n      y: 13\n    }, {\n      x: '2018-01-01 12:00:01.170',\n      y: 13\n    }]\n  }, {\n    id: 'signal B',\n    data: [{\n      x: '2018-01-01 12:00:01.100',\n      y: 14\n    }, {\n      x: '2018-01-01 12:00:01.110',\n      y: 14\n    }, {\n      x: '2018-01-01 12:00:01.120',\n      y: 15\n    }, {\n      x: '2018-01-01 12:00:01.130',\n      y: 11\n    }, {\n      x: '2018-01-01 12:00:01.140',\n      y: 10\n    }, {\n      x: '2018-01-01 12:00:01.150',\n      y: 12\n    }, {\n      x: '2018-01-01 12:00:01.160',\n      y: 9\n    }, {\n      x: '2018-01-01 12:00:01.170',\n      y: 7\n    }]\n  }]} xScale={{\n    type: 'time',\n    format: '%Y-%m-%d %H:%M:%S.%L',\n    useUTC: false,\n    precision: 'millisecond'\n  }} xFormat=\"time:%Y-%m-%d %H:%M:%S.%L\" yScale={{\n    type: 'linear'\n    // stacked: boolean('stacked', false),\n  }} axisLeft={{\n    legend: 'linear scale',\n    legendOffset: 12\n  }} axisBottom={{\n    format: '.%L',\n    tickValues: 'every 10 milliseconds',\n    legend: 'time scale',\n    legendOffset: -12\n  }} curve={args.curve} enablePointLabel={true} pointSymbol={CustomSymbol} pointSize={16} pointBorderWidth={1} pointBorderColor={{\n    from: 'color',\n    modifiers: [['darker', 0.3]]\n  }} useMesh={true} enableSlices={false} />\n}",...TimeScaleMillisecondsPrecision.parameters?.docs?.source}}},LogarithmicScale.parameters={...LogarithmicScale.parameters,docs:{...LogarithmicScale.parameters?.docs,source:{originalSource:"{\n  render: () => <Line {...commonProperties} data={[{\n    id: 'fake corp. A',\n    data: [{\n      x: 1,\n      y: 12\n    }, {\n      x: 2,\n      y: 123\n    }, {\n      x: 3,\n      y: 870\n    }, {\n      x: 4,\n      y: 21000\n    }, {\n      x: 7,\n      y: 400000\n    }, {\n      x: 9,\n      y: 10000\n    }, {\n      x: 16,\n      y: 10000000\n    }]\n  }]} gridYValues={[10, 100, 1000, 10000, 100000, 1000000, 10000000]} xScale={{\n    type: 'log',\n    base: 2,\n    max: 'auto'\n  }} axisBottom={{\n    legend: 'logarithmic scale (base: 2)',\n    legendOffset: -12\n  }} yScale={{\n    type: 'log',\n    base: 10,\n    max: 'auto'\n  }} axisLeft={{\n    tickValues: [10, 100, 1000, 10000, 100000, 1000000, 10000000],\n    legend: 'logarithmic scale (base: 10)',\n    legendOffset: 12\n  }} useMesh={true} enableSlices={false} />\n}",...LogarithmicScale.parameters?.docs?.source}}},SymmetricLogarithmicScale.parameters={...SymmetricLogarithmicScale.parameters,docs:{...SymmetricLogarithmicScale.parameters?.docs,source:{originalSource:"{\n  render: () => <Line {...commonProperties} data={[{\n    id: 'fake corp. A',\n    data: [{\n      x: 1,\n      y: -12\n    }, {\n      x: 2,\n      y: 123\n    }, {\n      x: 3,\n      y: 870\n    }, {\n      x: 4,\n      y: 210\n    }, {\n      x: 7,\n      y: 400\n    }, {\n      x: 9,\n      y: 100\n    }, {\n      x: 16,\n      y: 1000\n    }]\n  }]} xScale={{\n    type: 'linear',\n    max: 'auto'\n  }} yScale={{\n    type: 'symlog',\n    max: 'auto'\n  }} axisLeft={{\n    tickValues: [0, 100, 250, 500, 1000],\n    legend: 'symmetric logarithmic scale',\n    legendOffset: 12\n  }} useMesh={true} enableSlices={false} />\n}",...SymmetricLogarithmicScale.parameters?.docs?.source}}},RealTimeChart.parameters={...RealTimeChart.parameters,docs:{...RealTimeChart.parameters?.docs,source:{originalSource:"{\n  render: () => <RealTimeChartComponent />\n}",...RealTimeChart.parameters?.docs?.source}}},GrowingLine.parameters={...GrowingLine.parameters,docs:{...GrowingLine.parameters?.docs,source:{originalSource:"{\n  render: () => <GrowingLineComponent />\n}",...GrowingLine.parameters?.docs?.source}}},CustomPointSymbol.parameters={...CustomPointSymbol.parameters,docs:{...CustomPointSymbol.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} yScale={{\n    type: 'linear'\n    // stacked: boolean('stacked', true),\n  }} curve={args.curve} pointSymbol={CustomSymbol} pointSize={16} pointBorderWidth={1} pointBorderColor={{\n    from: 'color',\n    modifiers: [['darker', 0.3]]\n  }} axisLeft={{\n    tickSize: 10\n  }} />\n}",...CustomPointSymbol.parameters?.docs?.source}}},UsingDataColors.parameters={...UsingDataColors.parameters,docs:{...UsingDataColors.parameters?.docs,source:{originalSource:"{\n  render: () => <Line {...commonProperties} yScale={{\n    type: 'linear',\n    stacked: true\n  }} curve=\"linear\" colors={{\n    datum: 'color'\n  }} enablePointLabel={true} pointSize={10} pointBorderColor={{\n    theme: 'background'\n  }} pointBorderWidth={2} enableSlices={false} useMesh={true} />\n}",...UsingDataColors.parameters?.docs?.source}}},AddingMarkers.parameters={...AddingMarkers.parameters,docs:{...AddingMarkers.parameters?.docs,source:{originalSource:"{\n  args: {\n    curve: 'catmullRom'\n  },\n  render: args => <Line {...commonProperties} yScale={{\n    type: 'linear'\n    //stacked: boolean('stacked', true),\n  }} curve={args.curve} markers={[{\n    axis: 'y',\n    value: 100,\n    lineStyle: {\n      stroke: '#b0413e',\n      strokeWidth: 2\n    },\n    legend: 'y marker',\n    legendOrientation: 'vertical'\n  }, {\n    axis: 'x',\n    value: data[0].data[5].x,\n    lineStyle: {\n      stroke: '#b0413e',\n      strokeWidth: 2\n    },\n    legend: 'x marker'\n  }]} />\n}",...AddingMarkers.parameters?.docs?.source}}},HolesInData.parameters={...HolesInData.parameters,docs:{...HolesInData.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} data={[{\n    id: 'fake corp. A',\n    data: [4, 8, 5, null, 2, 1, 4, null, 8, 9, 5].map((y, i) => ({\n      x: `#${i}`,\n      y\n    }))\n  }, {\n    id: 'fake corp. B',\n    data: [5, 9, 8, 6, 3, 1, 2, null, 5, 8, 4].map((y, i) => ({\n      x: `#${i}`,\n      y\n    }))\n  }]} yScale={{\n    type: 'linear'\n    // stacked: boolean('stacked', false),\n  }} curve={args.curve} pointSize={8} pointBorderColor=\"#fff\" pointBorderWidth={2} />\n}",...HolesInData.parameters?.docs?.source},description:{story:"You can skip portions of the lines by setting y value to \\`null\\`.",...HolesInData.parameters?.docs?.description}}},DifferentSeriesLength.parameters={...DifferentSeriesLength.parameters,docs:{...DifferentSeriesLength.parameters?.docs,source:{originalSource:"{\n  render: () => <Line {...commonProperties} data={[{\n    id: 'fake corp. A',\n    data: [{\n      x: 0,\n      y: 7\n    }, {\n      x: 1,\n      y: 5\n    }, {\n      x: 2,\n      y: 11\n    }, {\n      x: 3,\n      y: 12\n    }, {\n      x: 4,\n      y: 13\n    }, {\n      x: 5,\n      y: null\n    }, {\n      x: 6,\n      y: 18\n    }, {\n      x: 7,\n      y: 16\n    }, {\n      x: 8,\n      y: 8\n    }, {\n      x: 9,\n      y: 10\n    }, {\n      x: 10,\n      y: 9\n    }]\n  }, {\n    id: 'fake corp. B',\n    data: [{\n      x: 3,\n      y: 14\n    }, {\n      x: 4,\n      y: 16\n    }, {\n      x: 5,\n      y: 19\n    }, {\n      x: 6,\n      y: 20\n    }, {\n      x: 7,\n      y: 18\n    }]\n  }]} xScale={{\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  }} yScale={{\n    type: 'linear'\n    // stacked: boolean('stacked', false),\n  }} curve=\"monotoneX\" />\n}",...DifferentSeriesLength.parameters?.docs?.source},description:{story:"Please note that when using stacked y scale with variable length/data holes,\nif one of the y value is \\`null\\` all subsequent values will be skipped\nas we cannot properly compute the sum.",...DifferentSeriesLength.parameters?.docs?.description}}},CustomMinMaxY.parameters={...CustomMinMaxY.parameters,docs:{...CustomMinMaxY.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} markers={[{\n    axis: 'y',\n    value: 0,\n    lineStyle: {\n      stroke: '#b0413e',\n      strokeWidth: 1\n    },\n    legend: 'y marker at 0',\n    legendPosition: 'bottom-left'\n  }]} data={[{\n    id: 'fake corp. A',\n    data: [0.5, 0.6, 0.8, 0.7, 0.8, 0.5, 0.2, 0.3, 0.4, 0.5, 0.5, 0.1, -0.2, -0.6, -0.1, 0, 0.1, -0.1, -0.4, -0.6, -0.5, 0.2, 0.5, 0.6, 0.6].map((y, i) => ({\n      x: `#${i}`,\n      y\n    }))\n  }, {\n    id: 'fake corp. B',\n    data: [0.9, 0.5, 0.6, 0.5, 0.4, 0.3, -0.1, -0.5, -0.4, -0.4, -0.1, -0.3, -0.2, 0.1, 0.1, 0.3, 0.4, 0.5, 0.4, 0.6, 0.5, 0.7, 0.8, 0.4, 0.3].map((y, i) => ({\n      x: `#${i}`,\n      y\n    }))\n  }]} curve={args.curve} pointSize={8} pointBorderColor=\"#fff\" pointBorderWidth={2} yScale={{\n    type: 'linear',\n    //stacked: boolean('stacked', false),\n    min: -1,\n    max: 1\n  }} />\n}",...CustomMinMaxY.parameters?.docs?.source}}},NonLinearValues.parameters={...NonLinearValues.parameters,docs:{...NonLinearValues.parameters?.docs,source:{originalSource:"{\n  render: () => <Line {...commonProperties} xScale={{\n    type: 'linear',\n    min: 0,\n    max: 12\n  }} yScale={{\n    type: 'linear',\n    min: 0,\n    max: 11\n  }} colors=\"black\" curve=\"linear\" animate={false} lineWidth={4} pointSize={8} pointColor=\"white\" pointBorderColor={{\n    from: 'serieColor'\n  }} pointBorderWidth={2} enableSlices={false} useMesh={true} debugMesh={true} data={[{\n    id: 'nivo',\n    data: [{\n      x: 1,\n      y: 1\n    }, {\n      x: 1,\n      y: 10\n    }, {\n      x: 2.25,\n      y: 10\n    }, {\n      x: 3,\n      y: 4\n    }, {\n      x: 3,\n      y: 10\n    }, {\n      x: 4,\n      y: 10\n    }, {\n      x: 4,\n      y: 1\n    }, {\n      x: 2.75,\n      y: 1\n    }, {\n      x: 2,\n      y: 7\n    }, {\n      x: 2,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }, {\n      x: null,\n      y: null\n    }, {\n      x: 4.5,\n      y: 1\n    }, {\n      x: 5.5,\n      y: 1\n    }, {\n      x: 5.5,\n      y: 10\n    }, {\n      x: 4.5,\n      y: 10\n    }, {\n      x: 4.5,\n      y: 1\n    }, {\n      x: null,\n      y: null\n    }, {\n      x: 6.5,\n      y: 1\n    }, {\n      x: 7.5,\n      y: 1\n    }, {\n      x: 8.5,\n      y: 10\n    }, {\n      x: 7.5,\n      y: 10\n    }, {\n      x: 7,\n      y: 4\n    }, {\n      x: 6.5,\n      y: 10\n    }, {\n      x: 5.5,\n      y: 10\n    }, {\n      x: 6.5,\n      y: 1\n    }, {\n      x: null,\n      y: null\n    }, {\n      x: 9.5,\n      y: 1\n    }, {\n      x: 10.5,\n      y: 1\n    }, {\n      x: 11.5,\n      y: 3\n    }, {\n      x: 11.5,\n      y: 8\n    }, {\n      x: 10.5,\n      y: 10\n    }, {\n      x: 9.5,\n      y: 10\n    }, {\n      x: 8.5,\n      y: 8\n    }, {\n      x: 8.5,\n      y: 3\n    }, {\n      x: 9.5,\n      y: 1\n    }, {\n      x: null,\n      y: null\n    }, {\n      x: 9.5,\n      y: 4\n    }, {\n      x: 10.5,\n      y: 4\n    }, {\n      x: 10.5,\n      y: 7\n    }, {\n      x: 9.5,\n      y: 7\n    }, {\n      x: 9.5,\n      y: 4\n    }]\n  }]} />\n}",...NonLinearValues.parameters?.docs?.source}}},HighlightingNegativeValues.parameters={...HighlightingNegativeValues.parameters,docs:{...HighlightingNegativeValues.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} data={[{\n    id: 'positive :)',\n    data: [{\n      x: 0,\n      y: 0.7\n    }, {\n      x: 1,\n      y: 0.9\n    }, {\n      x: 2,\n      y: 0.8\n    }, {\n      x: 3,\n      y: 0.6\n    }, {\n      x: 4,\n      y: 0.3\n    }, {\n      x: 5,\n      y: 0\n    }, {\n      x: 6,\n      y: null\n    }, {\n      x: 7,\n      y: null\n    }, {\n      x: 8,\n      y: null\n    }, {\n      x: 9,\n      y: null\n    }, {\n      x: 10,\n      y: null\n    }, {\n      x: 11,\n      y: 0\n    }, {\n      x: 12,\n      y: 0.4\n    }, {\n      x: 13,\n      y: 0.6\n    }, {\n      x: 14,\n      y: 0.5\n    }, {\n      x: 15,\n      y: 0.3\n    }, {\n      x: 16,\n      y: 0.4\n    }, {\n      x: 17,\n      y: 0\n    }]\n  }, {\n    id: 'negative :(',\n    data: [{\n      x: 5,\n      y: 0\n    }, {\n      x: 6,\n      y: -0.3\n    }, {\n      x: 7,\n      y: -0.5\n    }, {\n      x: 8,\n      y: -0.9\n    }, {\n      x: 9,\n      y: -0.2\n    }, {\n      x: 10,\n      y: -0.4\n    }, {\n      x: 11,\n      y: 0\n    }, {\n      x: 12,\n      y: null\n    }, {\n      x: 13,\n      y: null\n    }, {\n      x: 14,\n      y: null\n    }, {\n      x: 15,\n      y: null\n    }, {\n      x: 16,\n      y: null\n    }, {\n      x: 17,\n      y: 0\n    }, {\n      x: 18,\n      y: -0.4\n    }, {\n      x: 19,\n      y: -0.2\n    }, {\n      x: 20,\n      y: -0.1\n    }, {\n      x: 21,\n      y: -0.6\n    }]\n  }]} curve={args.curve} enablePointLabel={true} pointSymbol={CustomSymbol} pointSize={14} pointBorderWidth={1} pointBorderColor={{\n    from: 'color',\n    modifiers: [['darker', 0.3]]\n  }} pointLabelYOffset={-20} enableGridX={false} colors={['rgb(97, 205, 187)', 'rgb(244, 117, 96)']} xScale={{\n    type: 'linear'\n  }} yScale={{\n    type: 'linear',\n    stacked: false,\n    min: -1,\n    max: 1\n  }} enableArea={true} areaOpacity={0.07} enableSlices={false} useMesh={true} crosshairType=\"cross\" />\n}",...HighlightingNegativeValues.parameters?.docs?.source},description:{story:"You can have two different line styles for a line if you split it into\ntwo data set, one containing positive values and negative values filled with \\`null\\`\nand the other having only negative values and positive ones replaced by \\`null\\`.",...HighlightingNegativeValues.parameters?.docs?.description}}},FormattingAxisValues.parameters={...FormattingAxisValues.parameters,docs:{...FormattingAxisValues.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} curve={args.curve} yScale={{\n    type: 'linear'\n    //stacked: boolean('stacked', true),\n  }} axisLeft={{\n    format: value => `${Number(value).toLocaleString('ru-RU', {\n      minimumFractionDigits: 2\n    })} ₽`\n  }} />\n}",...FormattingAxisValues.parameters?.docs?.source}}},FormattingValues.parameters={...FormattingValues.parameters,docs:{...FormattingValues.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} curve={args.curve} yScale={{\n    type: 'linear'\n    //stacked: boolean('stacked', true),\n  }} yFormat={value => `${Number(value).toLocaleString('ru-RU', {\n    minimumFractionDigits: 2\n  })} ₽`} />\n}",...FormattingValues.parameters?.docs?.source}}},CustomTooltip.parameters={...CustomTooltip.parameters,docs:{...CustomTooltip.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} enableSlices=\"x\" curve={args.curve} yScale={{\n    type: 'linear'\n    //stacked: boolean('stacked', true),\n  }} sliceTooltip={({\n    slice\n  }) => {\n    return <div style={{\n      background: 'white',\n      padding: '9px 12px',\n      border: '1px solid #ccc'\n    }}>\n                        <div>x: {slice.id}</div>\n                        {slice.points.map(point => <div key={point.id} style={{\n        color: point.serieColor,\n        padding: '3px 0'\n      }}>\n                                <strong>{point.serieId}</strong> [{point.data.yFormatted}]\n                            </div>)}\n                    </div>;\n  }} />\n}",...CustomTooltip.parameters?.docs?.source}}},CustomLayers.parameters={...CustomLayers.parameters,docs:{...CustomLayers.parameters?.docs,source:{originalSource:"{\n  args: {\n    curve: 'linear'\n  },\n  render: args => <Line {...commonProperties} yScale={{\n    type: 'linear',\n    stacked: true\n  }} data={commonProperties.data.filter(d => ['rhum', 'whisky'].includes(d.id))} lineWidth={3} curve={args.curve} colors={['#028ee6', '#774dd7']} enableGridX={false} pointSize={12} pointColor=\"white\" pointBorderWidth={2} pointBorderColor={{\n    from: 'serieColor'\n  }} layers={['grid', 'markers', 'areas', AreaLayer, 'lines', 'slices', 'axes', 'points', 'legends']} theme={{\n    crosshair: {\n      line: {\n        strokeWidth: 2,\n        stroke: '#774dd7',\n        strokeOpacity: 1\n      }\n    }\n  }} />\n}",...CustomLayers.parameters?.docs?.source},description:{story:"You can use the layers property to add extra layers to the line chart.",...CustomLayers.parameters?.docs?.description}}},CustomLineStyle.parameters={...CustomLineStyle.parameters,docs:{...CustomLineStyle.parameters?.docs,source:{originalSource:"{\n  render: () => <Line {...commonProperties} xScale={{\n    type: 'point',\n    min: 'auto',\n    max: 'auto'\n  }} yScale={{\n    type: 'linear',\n    min: 'auto',\n    max: 'auto'\n  }} axisBottom={{\n    orient: 'bottom',\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0\n  }} axisLeft={{\n    orient: 'left',\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0\n  }} layers={['grid', 'markers', 'areas', DashedLine, 'slices', 'points', 'axes', 'legends']} />\n}",...CustomLineStyle.parameters?.docs?.source},description:{story:"You can customize line styles using the 'layers' property and implement your own line rendering.",...CustomLineStyle.parameters?.docs?.description}}},AreaGradients.parameters={...AreaGradients.parameters,docs:{...AreaGradients.parameters?.docs,source:{originalSource:"{\n  render: args => <Line {...commonProperties} enableArea={true} yScale={{\n    type: 'linear',\n    stacked: true\n  }} curve={args.curve} defs={[linearGradientDef('gradientA', [{\n    offset: 0,\n    color: 'inherit'\n  }, {\n    offset: 100,\n    color: 'inherit',\n    opacity: 0\n  }])]} fill={[{\n    match: '*',\n    id: 'gradientA'\n  }]} />\n}",...AreaGradients.parameters?.docs?.source}}};const __namedExportsOrder=["StackedLines","LinearScale","TimeScale","TimeScaleMillisecondsPrecision","LogarithmicScale","SymmetricLogarithmicScale","RealTimeChart","GrowingLine","CustomPointSymbol","UsingDataColors","AddingMarkers","HolesInData","DifferentSeriesLength","CustomMinMaxY","NonLinearValues","HighlightingNegativeValues","FormattingAxisValues","FormattingValues","CustomTooltip","CustomLayers","CustomLineStyle","AreaGradients"];try{StackedLines.displayName="StackedLines",StackedLines.__docgenInfo={description:"You can stack lines using the \\`yScale.stacked\\` property.\nPlease note that stacking is only supported for linear scales.",displayName:"StackedLines",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/line/Line.stories.tsx#StackedLines"]={docgenInfo:StackedLines.__docgenInfo,name:"StackedLines",path:"stories/line/Line.stories.tsx#StackedLines"})}catch(__react_docgen_typescript_loader_error){}try{LinearScale.displayName="LinearScale",LinearScale.__docgenInfo={description:"By default, \\`xScale\\` is a point scale, but you can switch to linear using\nthe \\`xScale.type\\` property. It supports irregular intervals while \\`point\\`\nscale doesn't.\n\nIf you want missing datums to appear as holes instead of connecting defined ones,\nyou should set their y value to \\`null\\`.",displayName:"LinearScale",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/line/Line.stories.tsx#LinearScale"]={docgenInfo:LinearScale.__docgenInfo,name:"LinearScale",path:"stories/line/Line.stories.tsx#LinearScale"})}catch(__react_docgen_typescript_loader_error){}try{HolesInData.displayName="HolesInData",HolesInData.__docgenInfo={description:"You can skip portions of the lines by setting y value to \\`null\\`.",displayName:"HolesInData",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/line/Line.stories.tsx#HolesInData"]={docgenInfo:HolesInData.__docgenInfo,name:"HolesInData",path:"stories/line/Line.stories.tsx#HolesInData"})}catch(__react_docgen_typescript_loader_error){}try{DifferentSeriesLength.displayName="DifferentSeriesLength",DifferentSeriesLength.__docgenInfo={description:"Please note that when using stacked y scale with variable length/data holes,\nif one of the y value is \\`null\\` all subsequent values will be skipped\nas we cannot properly compute the sum.",displayName:"DifferentSeriesLength",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/line/Line.stories.tsx#DifferentSeriesLength"]={docgenInfo:DifferentSeriesLength.__docgenInfo,name:"DifferentSeriesLength",path:"stories/line/Line.stories.tsx#DifferentSeriesLength"})}catch(__react_docgen_typescript_loader_error){}try{HighlightingNegativeValues.displayName="HighlightingNegativeValues",HighlightingNegativeValues.__docgenInfo={description:"You can have two different line styles for a line if you split it into\ntwo data set, one containing positive values and negative values filled with \\`null\\`\nand the other having only negative values and positive ones replaced by \\`null\\`.",displayName:"HighlightingNegativeValues",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/line/Line.stories.tsx#HighlightingNegativeValues"]={docgenInfo:HighlightingNegativeValues.__docgenInfo,name:"HighlightingNegativeValues",path:"stories/line/Line.stories.tsx#HighlightingNegativeValues"})}catch(__react_docgen_typescript_loader_error){}try{CustomLayers.displayName="CustomLayers",CustomLayers.__docgenInfo={description:"You can use the layers property to add extra layers to the line chart.",displayName:"CustomLayers",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/line/Line.stories.tsx#CustomLayers"]={docgenInfo:CustomLayers.__docgenInfo,name:"CustomLayers",path:"stories/line/Line.stories.tsx#CustomLayers"})}catch(__react_docgen_typescript_loader_error){}try{CustomLineStyle.displayName="CustomLineStyle",CustomLineStyle.__docgenInfo={description:"You can customize line styles using the 'layers' property and implement your own line rendering.",displayName:"CustomLineStyle",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/line/Line.stories.tsx#CustomLineStyle"]={docgenInfo:CustomLineStyle.__docgenInfo,name:"CustomLineStyle",path:"stories/line/Line.stories.tsx#CustomLineStyle"})}catch(__react_docgen_typescript_loader_error){}}}]);