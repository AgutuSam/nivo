"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[9749],{"./stories/line/LineCanvas.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,CustomLineStyle:()=>CustomLineStyle,DifferentSeriesLengths:()=>DifferentSeriesLengths,DownloadTheChart:()=>DownloadTheChart,HolesInData:()=>HolesInData,TimeScale:()=>TimeScale,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_nivo_generators__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../packages/generators/dist/nivo-generators.es.js"),_nivo_line__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../packages/line/dist/nivo-line.es.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"LineCanvas",component:_nivo_line__WEBPACK_IMPORTED_MODULE_2__.Gi,tags:["autodocs"],argTypes:{curve:{control:"select",options:["linear","monotoneX","step","stepBefore","stepAfter"]}},args:{curve:"monotoneX"}},commonProperties={width:900,height:400,margin:{top:20,right:20,bottom:60,left:80},data:(0,_nivo_generators__WEBPACK_IMPORTED_MODULE_1__.ak)(32),pointSize:8,pointColor:{theme:"background"},pointBorderWidth:2,pointBorderColor:{theme:"background"}},Basic={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_2__.Gi,{...commonProperties})},HolesInData={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_2__.Gi,{...commonProperties,data:[{id:"fake corp. A",data:[4,8,5,null,2,1,4,null,8,9,5].map(((y,i)=>({x:`#${i}`,y})))},{id:"fake corp. B",data:[5,9,8,6,3,1,2,null,5,8,4].map(((y,i)=>({x:`#${i}`,y})))}],yScale:{type:"linear"},curve:"monotoneX"})},DifferentSeriesLengths={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_2__.Gi,{...commonProperties,data:[{id:"fake corp. A",data:[{x:0,y:7},{x:1,y:5},{x:2,y:11},{x:3,y:12},{x:4,y:13},{x:5,y:null},{x:6,y:18},{x:7,y:16},{x:8,y:8},{x:9,y:10},{x:10,y:9}]},{id:"fake corp. B",data:[{x:3,y:14},{x:4,y:16},{x:5,y:19},{x:6,y:20},{x:7,y:18}]}],xScale:{type:"linear",min:0,max:"auto"},yScale:{type:"linear",stacked:!1},curve:"monotoneX",enableArea:!0})},TimeScale={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_2__.Gi,{...commonProperties,data:[{id:"fake corp. A",data:[{x:"2018-01-01",y:7},{x:"2018-01-02",y:5},{x:"2018-01-03",y:11},{x:"2018-01-04",y:9},{x:"2018-01-05",y:12},{x:"2018-01-06",y:16},{x:"2018-01-07",y:13},{x:"2018-01-08",y:13}]},{id:"fake corp. B",data:[{x:"2018-01-04",y:14},{x:"2018-01-05",y:14},{x:"2018-01-06",y:15},{x:"2018-01-07",y:11},{x:"2018-01-08",y:10},{x:"2018-01-09",y:12},{x:"2018-01-10",y:9},{x:"2018-01-11",y:7}]}],xScale:{type:"time",format:"%Y-%m-%d",precision:"day"},xFormat:"time:%Y-%m-%d",yScale:{type:"linear"},axisLeft:{legend:"linear scale",legendOffset:12},axisBottom:{format:"%b %d",tickValues:"every 2 days",legend:"time scale",legendOffset:-12},enablePointLabel:!0,pointSize:16,pointBorderWidth:1,pointBorderColor:{from:"color",modifiers:[["darker",.3]]},useMesh:!0,enableSlices:!1})},CustomLineStyle={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_2__.Gi,{...commonProperties,layers:["grid","markers","areas",({lineGenerator,series,ctx,lineWidth,innerWidth})=>{lineGenerator.context(ctx),series.forEach((serie=>{const gradient=ctx.createLinearGradient(0,0,innerWidth,0);gradient.addColorStop("0","white"),gradient.addColorStop("0.5",serie.color),gradient.addColorStop("1.0","black"),ctx.strokeStyle=gradient,ctx.lineWidth=lineWidth,ctx.beginPath(),lineGenerator(serie.data.map((d=>d.position))),ctx.stroke()}))},"points","mesh","legends"]})},DownloadTheChart={render:()=>{const ref=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0),handleDownload=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((()=>{const canvas=ref.current,link=document.createElement("a");link.download="nivo-line.png",link.href=canvas.toDataURL("image/png"),link.click()}));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("button",{onClick:handleDownload,children:"Download image"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_line__WEBPACK_IMPORTED_MODULE_2__.Gi,{...commonProperties,ref})]})}};Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"{\n  render: () => <LineCanvas {...commonProperties} />\n}",...Basic.parameters?.docs?.source}}},HolesInData.parameters={...HolesInData.parameters,docs:{...HolesInData.parameters?.docs,source:{originalSource:"{\n  // You can skip portions of the lines by setting y value to `null`.\n  render: () => <LineCanvas {...commonProperties} data={[{\n    id: 'fake corp. A',\n    data: [4, 8, 5, null, 2, 1, 4, null, 8, 9, 5].map((y, i) => ({\n      x: `#${i}`,\n      y\n    }))\n  }, {\n    id: 'fake corp. B',\n    data: [5, 9, 8, 6, 3, 1, 2, null, 5, 8, 4].map((y, i) => ({\n      x: `#${i}`,\n      y\n    }))\n  }]} yScale={{\n    type: 'linear'\n    // stacked: boolean('stacked', false),\n  }} curve=\"monotoneX\" />\n}",...HolesInData.parameters?.docs?.source}}},DifferentSeriesLengths.parameters={...DifferentSeriesLengths.parameters,docs:{...DifferentSeriesLengths.parameters?.docs,source:{originalSource:"{\n  // Please note that when using stacked y scale with variable length/data holes,\n  // if one of the y value is `null` all subsequent values will be skipped\n  // as we cannot properly compute the sum.\n  render: () => <LineCanvas {...commonProperties} data={[{\n    id: 'fake corp. A',\n    data: [{\n      x: 0,\n      y: 7\n    }, {\n      x: 1,\n      y: 5\n    }, {\n      x: 2,\n      y: 11\n    }, {\n      x: 3,\n      y: 12\n    }, {\n      x: 4,\n      y: 13\n    }, {\n      x: 5,\n      y: null\n    }, {\n      x: 6,\n      y: 18\n    }, {\n      x: 7,\n      y: 16\n    }, {\n      x: 8,\n      y: 8\n    }, {\n      x: 9,\n      y: 10\n    }, {\n      x: 10,\n      y: 9\n    }]\n  }, {\n    id: 'fake corp. B',\n    data: [{\n      x: 3,\n      y: 14\n    }, {\n      x: 4,\n      y: 16\n    }, {\n      x: 5,\n      y: 19\n    }, {\n      x: 6,\n      y: 20\n    }, {\n      x: 7,\n      y: 18\n    }]\n  }]} xScale={{\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  }} yScale={{\n    type: 'linear',\n    stacked: false\n  }} curve=\"monotoneX\" enableArea={true} />\n}",...DifferentSeriesLengths.parameters?.docs?.source}}},TimeScale.parameters={...TimeScale.parameters,docs:{...TimeScale.parameters?.docs,source:{originalSource:"{\n  render: () => <LineCanvas {...commonProperties} data={[{\n    id: 'fake corp. A',\n    data: [{\n      x: '2018-01-01',\n      y: 7\n    }, {\n      x: '2018-01-02',\n      y: 5\n    }, {\n      x: '2018-01-03',\n      y: 11\n    }, {\n      x: '2018-01-04',\n      y: 9\n    }, {\n      x: '2018-01-05',\n      y: 12\n    }, {\n      x: '2018-01-06',\n      y: 16\n    }, {\n      x: '2018-01-07',\n      y: 13\n    }, {\n      x: '2018-01-08',\n      y: 13\n    }]\n  }, {\n    id: 'fake corp. B',\n    data: [{\n      x: '2018-01-04',\n      y: 14\n    }, {\n      x: '2018-01-05',\n      y: 14\n    }, {\n      x: '2018-01-06',\n      y: 15\n    }, {\n      x: '2018-01-07',\n      y: 11\n    }, {\n      x: '2018-01-08',\n      y: 10\n    }, {\n      x: '2018-01-09',\n      y: 12\n    }, {\n      x: '2018-01-10',\n      y: 9\n    }, {\n      x: '2018-01-11',\n      y: 7\n    }]\n  }]} xScale={{\n    type: 'time',\n    format: '%Y-%m-%d',\n    precision: 'day'\n  }} xFormat=\"time:%Y-%m-%d\" yScale={{\n    type: 'linear'\n    // stacked: boolean('stacked', false),\n  }} axisLeft={{\n    legend: 'linear scale',\n    legendOffset: 12\n  }} axisBottom={{\n    format: '%b %d',\n    tickValues: 'every 2 days',\n    legend: 'time scale',\n    legendOffset: -12\n  }} enablePointLabel={true} pointSize={16} pointBorderWidth={1} pointBorderColor={{\n    from: 'color',\n    modifiers: [['darker', 0.3]]\n  }} useMesh={true} enableSlices={false} />\n}",...TimeScale.parameters?.docs?.source}}},CustomLineStyle.parameters={...CustomLineStyle.parameters,docs:{...CustomLineStyle.parameters?.docs,source:{originalSource:"{\n  render: () => <LineCanvas {...commonProperties} layers={['grid', 'markers', 'areas', ({\n    lineGenerator,\n    series,\n    ctx,\n    lineWidth,\n    innerWidth\n  }) => {\n    lineGenerator.context(ctx);\n    series.forEach(serie => {\n      const gradient = ctx.createLinearGradient(0, 0, innerWidth, 0);\n      gradient.addColorStop('0', 'white');\n      gradient.addColorStop('0.5', serie.color);\n      gradient.addColorStop('1.0', 'black');\n      ctx.strokeStyle = gradient;\n      ctx.lineWidth = lineWidth;\n      ctx.beginPath();\n      lineGenerator(serie.data.map(d => d.position));\n      ctx.stroke();\n    });\n  }, 'points', 'mesh', 'legends']} />\n}",...CustomLineStyle.parameters?.docs?.source}}},DownloadTheChart.parameters={...DownloadTheChart.parameters,docs:{...DownloadTheChart.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const ref = useRef(undefined);\n    const handleDownload = useCallback(() => {\n      const canvas = ref.current;\n      const link = document.createElement('a');\n      link.download = 'nivo-line.png';\n      link.href = canvas.toDataURL('image/png');\n      link.click();\n    });\n    return <div>\n                <button onClick={handleDownload}>Download image</button>\n                <LineCanvas {...commonProperties} ref={ref} />\n            </div>;\n  }\n}",...DownloadTheChart.parameters?.docs?.source}}};const __namedExportsOrder=["Basic","HolesInData","DifferentSeriesLengths","TimeScale","CustomLineStyle","DownloadTheChart"]}}]);