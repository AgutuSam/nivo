{"version":3,"file":"funnel-Funnel-stories.2a94fcc0.iframe.bundle.js","mappings":";;;;AA0FA;;;;;AAOA;;AAEA;;;;;;;AAOA;;;;AAIA;;AAIA;;;;;;;;;AAWA;;;;;;;;;;;;;;;AAiBA;;;;AAMA;;;;;;;;;;AAYA","sources":["webpack://storybook/./stories/funnel/Clustering.tsx"],"sourcesContent":["import { useEffect, useState, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { startCase, sum, random } from 'lodash'\nimport { randomNormal } from 'd3-random'\nimport { ResponsiveWaffle } from '@nivo/waffle'\nimport { ResponsiveBar } from '@nivo/bar'\nimport { ResponsiveFunnel } from '@nivo/funnel'\n\nconst steps = ['sent', 'viewed', 'clicked', 'add_to_card', 'purchased']\nconst baseValue = 100000\nconst stepColors = ['#1ca5b2', '#5eb8cb', '#8ec1d7', '#79a3cd', '#5981da']\nconst ages = ['18-', '18-20', '20-30', '30-40', '40-50', '50-65', '65-80', '80+']\nconst genderColors = ['#5981da', '#8ec1d7']\n\nconst randomClusters = (total: number, numberOfClusters: number) => {\n    const randomNumbers = Array.from({ length: numberOfClusters }, Math.random)\n    const randomTotal = sum(randomNumbers)\n    const randomRatios = randomNumbers.map(n => n / randomTotal)\n\n    let remaining = total\n    return randomRatios.map((ratio, index) => {\n        // make sure the sum of all values equals total\n        if (index === numberOfClusters - 1) return remaining\n\n        const value = Math.round(ratio * total)\n        remaining = remaining - value\n\n        return value\n    })\n}\n\nconst randomNormalClusters = (\n    total: number,\n    numberOfClusters: number,\n    { mean = 0.5, deviation = 0.2, _samples = 100 } = {}\n) => {\n    const samples = Math.max(numberOfClusters, _samples)\n    const randNormal = randomNormal(mean, deviation)\n\n    const step = 1 / numberOfClusters\n    const steps = Array.from({ length: numberOfClusters }, (_, index) => step * (index + 1))\n    const weights = Array.from({ length: numberOfClusters }).fill(0) as number[]\n    Array.from({ length: samples }).forEach(() => {\n        const n = randNormal()\n        const stepIndex = steps.indexOf(steps.filter(s => n <= s)[0])\n        weights[stepIndex]++\n    })\n\n    let remaining = total\n    return weights.map((weight, index) => {\n        if (index === numberOfClusters - 1) return remaining\n\n        const value = Math.round((total * weight) / samples)\n        remaining = remaining - value\n\n        return value\n    })\n}\n\nconst generateData = () => {\n    let lastValue = baseValue\n\n    return steps.map(step => {\n        lastValue = Math.round(lastValue * random(0.6, 0.95))\n\n        const genderClusters = randomClusters(lastValue, 2)\n        const ageClusters = randomNormalClusters(lastValue, ages.length, { mean: random(0.2, 0.8) })\n\n        return {\n            id: `step_${step}`,\n            value: lastValue,\n            label: startCase(step),\n            byGender: [\n                { id: 'male', value: genderClusters[0], label: 'Male' },\n                { id: 'female', value: genderClusters[1], label: 'Female' },\n            ],\n            byAge: ageClusters.map((value, index) => ({\n                id: ages[index],\n                value,\n            })),\n        }\n    })\n}\n\nconst Container = styled.div`\n    max-width: 900px;\n    background-color: #222;\n    padding: 24px 32px;\n`\n\nconst Years = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 0 12px;\n`\n\nconst YearButton = styled.div<{ isCurrent: boolean }>`\n    cursor: pointer;\n    background-color: ${({ isCurrent }) => (isCurrent ? '#1ca5b2' : '#000000')};\n    height: 36px;\n    display: flex;\n    align-items: center;\n    padding: 0 32px;\n    border-radius: 18px;\n    font-weight: 600;\n    color: ${({ isCurrent }) => (isCurrent ? 'white' : '#555555')};\n\n    &:hover {\n        box-shadow: 0 0 0 2px #1ca5b2 inset;\n        color: ${({ isCurrent }) => (isCurrent ? 'white' : '#1ca5b2')};\n    }\n`\n\nconst Header = styled.h2`\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-transform: uppercase;\n    font-size: 12px;\n    font-weight: 600;\n    color: #999999;\n`\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 80px auto 100px 200px;\n    grid-template-rows: 32px 40px 80px 80px 80px 80px 80px 40px;\n    grid-column-gap: 12px;\n    grid-row-gap: 1px;\n    grid-template-areas:\n        '0       1      gender  age'\n        '0       funnel 2       age0'\n        'bullet0 funnel gender0 age0'\n        'bullet1 funnel gender1 age1'\n        'bullet2 funnel gender2 age2'\n        'bullet3 funnel gender3 age3'\n        'bullet4 funnel gender4 age4'\n        '3       funnel 4       age4';\n`\n\nconst BulletWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Bullet = styled.div`\n    width: 42px;\n    height: 42px;\n    border-radius: 21px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-weight: 600;\n    font-size: 16px;\n    box-shadow: 0 0 0 5px black;\n`\n\nconst funnelTheme = {\n    labels: {\n        text: {\n            fontSize: 15,\n            fontFamily: `'Consolas', monospace`,\n        },\n    },\n    grid: {\n        line: {\n            stroke: '#444444',\n        },\n    },\n}\n\nconst barTheme = {\n    axis: {\n        ticks: {\n            line: {\n                stroke: '#444444',\n            },\n            text: {\n                fill: '#999999',\n            },\n        },\n    },\n    grid: {\n        line: {\n            stroke: '#444444',\n        },\n    },\n}\n\nconst baseYear = 2010\nconst dataByYear = Array.from({ length: 6 }).map((_, index) => {\n    return {\n        year: baseYear + index,\n        data: generateData(),\n    }\n})\n\nexport const FunnelWithClustering = () => {\n    const [yearIndex, setYearIndex] = useState(0)\n    const currentYear = dataByYear[yearIndex]\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setYearIndex(yearIndex < dataByYear.length - 1 ? yearIndex + 1 : 0)\n        }, 2000)\n        return () => clearTimeout(timer)\n    }, [yearIndex, setYearIndex])\n\n    return (\n        <>\n            <div\n                style={{\n                    margin: '0 0 16px 24px',\n                    fontWeight: 400,\n                    color: '#555',\n                    lineHeight: '18px',\n                }}\n            >\n                By combining a funnel chart with other chart types as small multiples, you can show\n                arbitrary clustering across each step.\n                <br />\n                Here we&apos;re using the <code>Waffle</code> component from the{' '}\n                <code>@nivo/waffle</code> package to show clustering by gender, and the{' '}\n                <code>Bar</code> component from <code>@nivo/bar</code> to show the repartition by\n                age.\n                <br />\n                In order to align the charts with the funnel, we&apos;re using a CSS grid.\n            </div>\n            <Container>\n                <Years>\n                    {dataByYear.map((year, index) => (\n                        <YearButton\n                            key={year.year}\n                            isCurrent={index === yearIndex}\n                            onClick={() => {\n                                setYearIndex(index)\n                            }}\n                        >\n                            {year.year}\n                        </YearButton>\n                    ))}\n                </Years>\n                <Grid>\n                    <Header style={{ gridArea: 'gender' }}>gender</Header>\n                    <Header style={{ gridArea: 'age' }}>age</Header>\n                    <div style={{ gridArea: 'funnel' }}>\n                        <ResponsiveFunnel\n                            margin={{ top: 40, bottom: 40, left: 20 }}\n                            data={currentYear.data}\n                            spacing={1}\n                            enableBeforeSeparators={false}\n                            beforeSeparatorOffset={20}\n                            afterSeparatorOffset={20}\n                            afterSeparatorLength={120}\n                            theme={funnelTheme}\n                            colors={stepColors}\n                            borderWidth={20}\n                            valueFormat=\">-.4s\"\n                            labelColor=\"#000000\"\n                            motionConfig=\"wobbly\"\n                        />\n                    </div>\n                    {currentYear.data.map((datum, index) => {\n                        const isFirst = index === 0\n                        const isLast = index === currentYear.data.length - 1\n\n                        let barAxisTop = null\n                        if (isFirst) {\n                            barAxisTop = {\n                                tickSize: 10,\n                                tickPadding: 12,\n                                tickRotation: -90,\n                            }\n                        }\n\n                        let barAxisBottom = null\n                        if (isLast) {\n                            barAxisBottom = {\n                                tickSize: 0,\n                                tickPadding: 12,\n                                tickRotation: -90,\n                            }\n                        }\n\n                        return (\n                            <Fragment key={datum.id}>\n                                <BulletWrapper style={{ gridArea: `bullet${index}` }}>\n                                    <Bullet style={{ backgroundColor: stepColors[index] }}>\n                                        {index + 1}\n                                    </Bullet>\n                                </BulletWrapper>\n                                <div style={{ gridArea: `gender${index}` }}>\n                                    <ResponsiveWaffle\n                                        margin={{ top: 10, right: 20, bottom: 10, left: 20 }}\n                                        data={datum.byGender}\n                                        colors={genderColors}\n                                        total={datum.value}\n                                        columns={5}\n                                        rows={5}\n                                        isInteractive={false}\n                                        motionStiffness={110}\n                                        motionDamping={8}\n                                    />\n                                </div>\n                                <div style={{ gridArea: `age${index}` }}>\n                                    <ResponsiveBar\n                                        margin={{ top: isFirst ? 50 : 10, bottom: isLast ? 40 : 0 }}\n                                        data={datum.byAge}\n                                        theme={barTheme}\n                                        colors={[stepColors[index]]}\n                                        enableGridY={false}\n                                        enableGridX={true}\n                                        enableLabel={false}\n                                        padding={0.3}\n                                        axisTop={barAxisTop}\n                                        axisBottom={barAxisBottom}\n                                        axisLeft={null}\n                                        isInteractive={false}\n                                        motionConfig=\"wobbly\"\n                                    />\n                                </div>\n                            </Fragment>\n                        )\n                    })}\n                </Grid>\n            </Container>\n        </>\n    )\n}\n"],"names":[],"sourceRoot":""}