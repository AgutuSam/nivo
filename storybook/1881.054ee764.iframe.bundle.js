"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[1881],{"../node_modules/.pnpm/d3-delaunay@5.3.0/node_modules/d3-delaunay/src/delaunay.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>Delaunay});const EPSILON=Math.pow(2,-52),EDGE_STACK=new Uint32Array(512);class Delaunator{static from(points,getX=defaultGetX,getY=defaultGetY){const n=points.length,coords=new Float64Array(2*n);for(let i=0;i<n;i++){const p=points[i];coords[2*i]=getX(p),coords[2*i+1]=getY(p)}return new Delaunator(coords)}constructor(coords){const n=coords.length>>1;if(n>0&&"number"!=typeof coords[0])throw new Error("Expected coords to contain numbers.");this.coords=coords;const maxTriangles=Math.max(2*n-5,0);this._triangles=new Uint32Array(3*maxTriangles),this._halfedges=new Int32Array(3*maxTriangles),this._hashSize=Math.ceil(Math.sqrt(n)),this._hullPrev=new Uint32Array(n),this._hullNext=new Uint32Array(n),this._hullTri=new Uint32Array(n),this._hullHash=new Int32Array(this._hashSize).fill(-1),this._ids=new Uint32Array(n),this._dists=new Float64Array(n),this.update()}update(){const{coords,_hullPrev:hullPrev,_hullNext:hullNext,_hullTri:hullTri,_hullHash:hullHash}=this,n=coords.length>>1;let minX=1/0,minY=1/0,maxX=-1/0,maxY=-1/0;for(let i=0;i<n;i++){const x=coords[2*i],y=coords[2*i+1];x<minX&&(minX=x),y<minY&&(minY=y),x>maxX&&(maxX=x),y>maxY&&(maxY=y),this._ids[i]=i}const cx=(minX+maxX)/2,cy=(minY+maxY)/2;let i0,i1,i2,minDist=1/0;for(let i=0;i<n;i++){const d=dist(cx,cy,coords[2*i],coords[2*i+1]);d<minDist&&(i0=i,minDist=d)}const i0x=coords[2*i0],i0y=coords[2*i0+1];minDist=1/0;for(let i=0;i<n;i++){if(i===i0)continue;const d=dist(i0x,i0y,coords[2*i],coords[2*i+1]);d<minDist&&d>0&&(i1=i,minDist=d)}let i1x=coords[2*i1],i1y=coords[2*i1+1],minRadius=1/0;for(let i=0;i<n;i++){if(i===i0||i===i1)continue;const r=circumradius(i0x,i0y,i1x,i1y,coords[2*i],coords[2*i+1]);r<minRadius&&(i2=i,minRadius=r)}let i2x=coords[2*i2],i2y=coords[2*i2+1];if(minRadius===1/0){for(let i=0;i<n;i++)this._dists[i]=coords[2*i]-coords[0]||coords[2*i+1]-coords[1];quicksort(this._ids,this._dists,0,n-1);const hull=new Uint32Array(n);let j=0;for(let i=0,d0=-1/0;i<n;i++){const id=this._ids[i];this._dists[id]>d0&&(hull[j++]=id,d0=this._dists[id])}return this.hull=hull.subarray(0,j),this.triangles=new Uint32Array(0),void(this.halfedges=new Uint32Array(0))}if(orient(i0x,i0y,i1x,i1y,i2x,i2y)){const i=i1,x=i1x,y=i1y;i1=i2,i1x=i2x,i1y=i2y,i2=i,i2x=x,i2y=y}const center=function circumcenter(ax,ay,bx,by,cx,cy){const dx=bx-ax,dy=by-ay,ex=cx-ax,ey=cy-ay,bl=dx*dx+dy*dy,cl=ex*ex+ey*ey,d=.5/(dx*ey-dy*ex);return{x:ax+(ey*bl-dy*cl)*d,y:ay+(dx*cl-ex*bl)*d}}(i0x,i0y,i1x,i1y,i2x,i2y);this._cx=center.x,this._cy=center.y;for(let i=0;i<n;i++)this._dists[i]=dist(coords[2*i],coords[2*i+1],center.x,center.y);quicksort(this._ids,this._dists,0,n-1),this._hullStart=i0;let hullSize=3;hullNext[i0]=hullPrev[i2]=i1,hullNext[i1]=hullPrev[i0]=i2,hullNext[i2]=hullPrev[i1]=i0,hullTri[i0]=0,hullTri[i1]=1,hullTri[i2]=2,hullHash.fill(-1),hullHash[this._hashKey(i0x,i0y)]=i0,hullHash[this._hashKey(i1x,i1y)]=i1,hullHash[this._hashKey(i2x,i2y)]=i2,this.trianglesLen=0,this._addTriangle(i0,i1,i2,-1,-1,-1);for(let xp,yp,k=0;k<this._ids.length;k++){const i=this._ids[k],x=coords[2*i],y=coords[2*i+1];if(k>0&&Math.abs(x-xp)<=EPSILON&&Math.abs(y-yp)<=EPSILON)continue;if(xp=x,yp=y,i===i0||i===i1||i===i2)continue;let start=0;for(let j=0,key=this._hashKey(x,y);j<this._hashSize&&(start=hullHash[(key+j)%this._hashSize],-1===start||start===hullNext[start]);j++);start=hullPrev[start];let q,e=start;for(;q=hullNext[e],!orient(x,y,coords[2*e],coords[2*e+1],coords[2*q],coords[2*q+1]);)if(e=q,e===start){e=-1;break}if(-1===e)continue;let t=this._addTriangle(e,i,hullNext[e],-1,-1,hullTri[e]);hullTri[i]=this._legalize(t+2),hullTri[e]=t,hullSize++;let n=hullNext[e];for(;q=hullNext[n],orient(x,y,coords[2*n],coords[2*n+1],coords[2*q],coords[2*q+1]);)t=this._addTriangle(n,i,q,hullTri[i],-1,hullTri[n]),hullTri[i]=this._legalize(t+2),hullNext[n]=n,hullSize--,n=q;if(e===start)for(;q=hullPrev[e],orient(x,y,coords[2*q],coords[2*q+1],coords[2*e],coords[2*e+1]);)t=this._addTriangle(q,i,e,-1,hullTri[e],hullTri[q]),this._legalize(t+2),hullTri[q]=t,hullNext[e]=e,hullSize--,e=q;this._hullStart=hullPrev[i]=e,hullNext[e]=hullPrev[n]=i,hullNext[i]=n,hullHash[this._hashKey(x,y)]=i,hullHash[this._hashKey(coords[2*e],coords[2*e+1])]=e}this.hull=new Uint32Array(hullSize);for(let i=0,e=this._hullStart;i<hullSize;i++)this.hull[i]=e,e=hullNext[e];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(x,y){return Math.floor(function pseudoAngle(dx,dy){const p=dx/(Math.abs(dx)+Math.abs(dy));return(dy>0?3-p:1+p)/4}(x-this._cx,y-this._cy)*this._hashSize)%this._hashSize}_legalize(a){const{_triangles:triangles,_halfedges:halfedges,coords}=this;let i=0,ar=0;for(;;){const b=halfedges[a],a0=a-a%3;if(ar=a0+(a+2)%3,-1===b){if(0===i)break;a=EDGE_STACK[--i];continue}const b0=b-b%3,al=a0+(a+1)%3,bl=b0+(b+2)%3,p0=triangles[ar],pr=triangles[a],pl=triangles[al],p1=triangles[bl];if(inCircle(coords[2*p0],coords[2*p0+1],coords[2*pr],coords[2*pr+1],coords[2*pl],coords[2*pl+1],coords[2*p1],coords[2*p1+1])){triangles[a]=p1,triangles[b]=p0;const hbl=halfedges[bl];if(-1===hbl){let e=this._hullStart;do{if(this._hullTri[e]===bl){this._hullTri[e]=a;break}e=this._hullPrev[e]}while(e!==this._hullStart)}this._link(a,hbl),this._link(b,halfedges[ar]),this._link(ar,bl);const br=b0+(b+1)%3;i<EDGE_STACK.length&&(EDGE_STACK[i++]=br)}else{if(0===i)break;a=EDGE_STACK[--i]}}return ar}_link(a,b){this._halfedges[a]=b,-1!==b&&(this._halfedges[b]=a)}_addTriangle(i0,i1,i2,a,b,c){const t=this.trianglesLen;return this._triangles[t]=i0,this._triangles[t+1]=i1,this._triangles[t+2]=i2,this._link(t,a),this._link(t+1,b),this._link(t+2,c),this.trianglesLen+=3,t}}function dist(ax,ay,bx,by){const dx=ax-bx,dy=ay-by;return dx*dx+dy*dy}function orientIfSure(px,py,rx,ry,qx,qy){const l=(ry-py)*(qx-px),r=(rx-px)*(qy-py);return Math.abs(l-r)>=33306690738754716e-32*Math.abs(l+r)?l-r:0}function orient(rx,ry,qx,qy,px,py){return(orientIfSure(px,py,rx,ry,qx,qy)||orientIfSure(rx,ry,qx,qy,px,py)||orientIfSure(qx,qy,px,py,rx,ry))<0}function inCircle(ax,ay,bx,by,cx,cy,px,py){const dx=ax-px,dy=ay-py,ex=bx-px,ey=by-py,fx=cx-px,fy=cy-py,bp=ex*ex+ey*ey,cp=fx*fx+fy*fy;return dx*(ey*cp-bp*fy)-dy*(ex*cp-bp*fx)+(dx*dx+dy*dy)*(ex*fy-ey*fx)<0}function circumradius(ax,ay,bx,by,cx,cy){const dx=bx-ax,dy=by-ay,ex=cx-ax,ey=cy-ay,bl=dx*dx+dy*dy,cl=ex*ex+ey*ey,d=.5/(dx*ey-dy*ex),x=(ey*bl-dy*cl)*d,y=(dx*cl-ex*bl)*d;return x*x+y*y}function quicksort(ids,dists,left,right){if(right-left<=20)for(let i=left+1;i<=right;i++){const temp=ids[i],tempDist=dists[temp];let j=i-1;for(;j>=left&&dists[ids[j]]>tempDist;)ids[j+1]=ids[j--];ids[j+1]=temp}else{let i=left+1,j=right;swap(ids,left+right>>1,i),dists[ids[left]]>dists[ids[right]]&&swap(ids,left,right),dists[ids[i]]>dists[ids[right]]&&swap(ids,i,right),dists[ids[left]]>dists[ids[i]]&&swap(ids,left,i);const temp=ids[i],tempDist=dists[temp];for(;;){do{i++}while(dists[ids[i]]<tempDist);do{j--}while(dists[ids[j]]>tempDist);if(j<i)break;swap(ids,i,j)}ids[left+1]=ids[j],ids[j]=temp,right-i+1>=j-left?(quicksort(ids,dists,i,right),quicksort(ids,dists,left,j-1)):(quicksort(ids,dists,left,j-1),quicksort(ids,dists,i,right))}}function swap(arr,i,j){const tmp=arr[i];arr[i]=arr[j],arr[j]=tmp}function defaultGetX(p){return p[0]}function defaultGetY(p){return p[1]}class Path{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(x,y){this._+=`M${this._x0=this._x1=+x},${this._y0=this._y1=+y}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(x,y){this._+=`L${this._x1=+x},${this._y1=+y}`}arc(x,y,r){const x0=(x=+x)+(r=+r),y0=y=+y;if(r<0)throw new Error("negative radius");null===this._x1?this._+=`M${x0},${y0}`:(Math.abs(this._x1-x0)>1e-6||Math.abs(this._y1-y0)>1e-6)&&(this._+="L"+x0+","+y0),r&&(this._+=`A${r},${r},0,1,1,${x-r},${y}A${r},${r},0,1,1,${this._x1=x0},${this._y1=y0}`)}rect(x,y,w,h){this._+=`M${this._x0=this._x1=+x},${this._y0=this._y1=+y}h${+w}v${+h}h${-w}Z`}value(){return this._||null}}class Polygon{constructor(){this._=[]}moveTo(x,y){this._.push([x,y])}closePath(){this._.push(this._[0].slice())}lineTo(x,y){this._.push([x,y])}value(){return this._.length?this._:null}}class Voronoi{constructor(delaunay,[xmin,ymin,xmax,ymax]=[0,0,960,500]){if(!((xmax=+xmax)>=(xmin=+xmin)&&(ymax=+ymax)>=(ymin=+ymin)))throw new Error("invalid bounds");this.delaunay=delaunay,this._circumcenters=new Float64Array(2*delaunay.points.length),this.vectors=new Float64Array(2*delaunay.points.length),this.xmax=xmax,this.xmin=xmin,this.ymax=ymax,this.ymin=ymin,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points,hull,triangles},vectors}=this,circumcenters=this.circumcenters=this._circumcenters.subarray(0,triangles.length/3*2);for(let x,y,i=0,j=0,n=triangles.length;i<n;i+=3,j+=2){const t1=2*triangles[i],t2=2*triangles[i+1],t3=2*triangles[i+2],x1=points[t1],y1=points[t1+1],x2=points[t2],y2=points[t2+1],x3=points[t3],y3=points[t3+1],dx=x2-x1,dy=y2-y1,ex=x3-x1,ey=y3-y1,bl=dx*dx+dy*dy,cl=ex*ex+ey*ey,ab=2*(dx*ey-dy*ex);if(ab)if(Math.abs(ab)<1e-8)x=(x1+x3)/2,y=(y1+y3)/2;else{const d=1/ab;x=x1+(ey*bl-dy*cl)*d,y=y1+(dx*cl-ex*bl)*d}else x=(x1+x3)/2-1e8*ey,y=(y1+y3)/2+1e8*ex;circumcenters[j]=x,circumcenters[j+1]=y}let p0,x0,y0,h=hull[hull.length-1],p1=4*h,x1=points[2*h],y1=points[2*h+1];vectors.fill(0);for(let i=0;i<hull.length;++i)h=hull[i],p0=p1,x0=x1,y0=y1,p1=4*h,x1=points[2*h],y1=points[2*h+1],vectors[p0+2]=vectors[p1]=y0-y1,vectors[p0+3]=vectors[p1+1]=x1-x0}render(context){const buffer=null==context?context=new Path:void 0,{delaunay:{halfedges,inedges,hull},circumcenters,vectors}=this;if(hull.length<=1)return null;for(let i=0,n=halfedges.length;i<n;++i){const j=halfedges[i];if(j<i)continue;const ti=2*Math.floor(i/3),tj=2*Math.floor(j/3),xi=circumcenters[ti],yi=circumcenters[ti+1],xj=circumcenters[tj],yj=circumcenters[tj+1];this._renderSegment(xi,yi,xj,yj,context)}let h0,h1=hull[hull.length-1];for(let i=0;i<hull.length;++i){h0=h1,h1=hull[i];const t=2*Math.floor(inedges[h1]/3),x=circumcenters[t],y=circumcenters[t+1],v=4*h0,p=this._project(x,y,vectors[v+2],vectors[v+3]);p&&this._renderSegment(x,y,p[0],p[1],context)}return buffer&&buffer.value()}renderBounds(context){const buffer=null==context?context=new Path:void 0;return context.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),buffer&&buffer.value()}renderCell(i,context){const buffer=null==context?context=new Path:void 0,points=this._clip(i);if(null===points||!points.length)return;context.moveTo(points[0],points[1]);let n=points.length;for(;points[0]===points[n-2]&&points[1]===points[n-1]&&n>1;)n-=2;for(let i=2;i<n;i+=2)points[i]===points[i-2]&&points[i+1]===points[i-1]||context.lineTo(points[i],points[i+1]);return context.closePath(),buffer&&buffer.value()}*cellPolygons(){const{delaunay:{points}}=this;for(let i=0,n=points.length/2;i<n;++i){const cell=this.cellPolygon(i);cell&&(cell.index=i,yield cell)}}cellPolygon(i){const polygon=new Polygon;return this.renderCell(i,polygon),polygon.value()}_renderSegment(x0,y0,x1,y1,context){let S;const c0=this._regioncode(x0,y0),c1=this._regioncode(x1,y1);0===c0&&0===c1?(context.moveTo(x0,y0),context.lineTo(x1,y1)):(S=this._clipSegment(x0,y0,x1,y1,c0,c1))&&(context.moveTo(S[0],S[1]),context.lineTo(S[2],S[3]))}contains(i,x,y){return(x=+x)==x&&(y=+y)==y&&this.delaunay._step(i,x,y)===i}*neighbors(i){const ci=this._clip(i);if(ci)for(const j of this.delaunay.neighbors(i)){const cj=this._clip(j);if(cj)loop:for(let ai=0,li=ci.length;ai<li;ai+=2)for(let aj=0,lj=cj.length;aj<lj;aj+=2)if(ci[ai]==cj[aj]&&ci[ai+1]==cj[aj+1]&&ci[(ai+2)%li]==cj[(aj+lj-2)%lj]&&ci[(ai+3)%li]==cj[(aj+lj-1)%lj]){yield j;break loop}}}_cell(i){const{circumcenters,delaunay:{inedges,halfedges,triangles}}=this,e0=inedges[i];if(-1===e0)return null;const points=[];let e=e0;do{const t=Math.floor(e/3);if(points.push(circumcenters[2*t],circumcenters[2*t+1]),e=e%3==2?e-2:e+1,triangles[e]!==i)break;e=halfedges[e]}while(e!==e0&&-1!==e);return points}_clip(i){if(0===i&&1===this.delaunay.hull.length)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const points=this._cell(i);if(null===points)return null;const{vectors:V}=this,v=4*i;return V[v]||V[v+1]?this._clipInfinite(i,points,V[v],V[v+1],V[v+2],V[v+3]):this._clipFinite(i,points)}_clipFinite(i,points){const n=points.length;let x0,y0,c0,e0,e1,P=null,x1=points[n-2],y1=points[n-1],c1=this._regioncode(x1,y1);for(let j=0;j<n;j+=2)if(x0=x1,y0=y1,x1=points[j],y1=points[j+1],c0=c1,c1=this._regioncode(x1,y1),0===c0&&0===c1)e0=e1,e1=0,P?P.push(x1,y1):P=[x1,y1];else{let S,sx0,sy0,sx1,sy1;if(0===c0){if(null===(S=this._clipSegment(x0,y0,x1,y1,c0,c1)))continue;[sx0,sy0,sx1,sy1]=S}else{if(null===(S=this._clipSegment(x1,y1,x0,y0,c1,c0)))continue;[sx1,sy1,sx0,sy0]=S,e0=e1,e1=this._edgecode(sx0,sy0),e0&&e1&&this._edge(i,e0,e1,P,P.length),P?P.push(sx0,sy0):P=[sx0,sy0]}e0=e1,e1=this._edgecode(sx1,sy1),e0&&e1&&this._edge(i,e0,e1,P,P.length),P?P.push(sx1,sy1):P=[sx1,sy1]}if(P)e0=e1,e1=this._edgecode(P[0],P[1]),e0&&e1&&this._edge(i,e0,e1,P,P.length);else if(this.contains(i,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return P}_clipSegment(x0,y0,x1,y1,c0,c1){for(;;){if(0===c0&&0===c1)return[x0,y0,x1,y1];if(c0&c1)return null;let x,y,c=c0||c1;8&c?(x=x0+(x1-x0)*(this.ymax-y0)/(y1-y0),y=this.ymax):4&c?(x=x0+(x1-x0)*(this.ymin-y0)/(y1-y0),y=this.ymin):2&c?(y=y0+(y1-y0)*(this.xmax-x0)/(x1-x0),x=this.xmax):(y=y0+(y1-y0)*(this.xmin-x0)/(x1-x0),x=this.xmin),c0?(x0=x,y0=y,c0=this._regioncode(x0,y0)):(x1=x,y1=y,c1=this._regioncode(x1,y1))}}_clipInfinite(i,points,vx0,vy0,vxn,vyn){let p,P=Array.from(points);if((p=this._project(P[0],P[1],vx0,vy0))&&P.unshift(p[0],p[1]),(p=this._project(P[P.length-2],P[P.length-1],vxn,vyn))&&P.push(p[0],p[1]),P=this._clipFinite(i,P))for(let c0,j=0,n=P.length,c1=this._edgecode(P[n-2],P[n-1]);j<n;j+=2)c0=c1,c1=this._edgecode(P[j],P[j+1]),c0&&c1&&(j=this._edge(i,c0,c1,P,j),n=P.length);else this.contains(i,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(P=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return P}_edge(i,e0,e1,P,j){for(;e0!==e1;){let x,y;switch(e0){case 5:e0=4;continue;case 4:e0=6,x=this.xmax,y=this.ymin;break;case 6:e0=2;continue;case 2:e0=10,x=this.xmax,y=this.ymax;break;case 10:e0=8;continue;case 8:e0=9,x=this.xmin,y=this.ymax;break;case 9:e0=1;continue;case 1:e0=5,x=this.xmin,y=this.ymin}P[j]===x&&P[j+1]===y||!this.contains(i,x,y)||(P.splice(j,0,x,y),j+=2)}if(P.length>4)for(let i=0;i<P.length;i+=2){const j=(i+2)%P.length,k=(i+4)%P.length;(P[i]===P[j]&&P[j]===P[k]||P[i+1]===P[j+1]&&P[j+1]===P[k+1])&&(P.splice(j,2),i-=2)}return j}_project(x0,y0,vx,vy){let c,x,y,t=1/0;if(vy<0){if(y0<=this.ymin)return null;(c=(this.ymin-y0)/vy)<t&&(y=this.ymin,x=x0+(t=c)*vx)}else if(vy>0){if(y0>=this.ymax)return null;(c=(this.ymax-y0)/vy)<t&&(y=this.ymax,x=x0+(t=c)*vx)}if(vx>0){if(x0>=this.xmax)return null;(c=(this.xmax-x0)/vx)<t&&(x=this.xmax,y=y0+(t=c)*vy)}else if(vx<0){if(x0<=this.xmin)return null;(c=(this.xmin-x0)/vx)<t&&(x=this.xmin,y=y0+(t=c)*vy)}return[x,y]}_edgecode(x,y){return(x===this.xmin?1:x===this.xmax?2:0)|(y===this.ymin?4:y===this.ymax?8:0)}_regioncode(x,y){return(x<this.xmin?1:x>this.xmax?2:0)|(y<this.ymin?4:y>this.ymax?8:0)}}const tau=2*Math.PI,pow=Math.pow;function pointX(p){return p[0]}function pointY(p){return p[1]}function jitter(x,y,r){return[x+Math.sin(x+y)*r,y+Math.cos(x-y)*r]}class Delaunay{static from(points,fx=pointX,fy=pointY,that){return new Delaunay("length"in points?function flatArray(points,fx,fy,that){const n=points.length,array=new Float64Array(2*n);for(let i=0;i<n;++i){const p=points[i];array[2*i]=fx.call(that,p,i,points),array[2*i+1]=fy.call(that,p,i,points)}return array}(points,fx,fy,that):Float64Array.from(function*flatIterable(points,fx,fy,that){let i=0;for(const p of points)yield fx.call(that,p,i,points),yield fy.call(that,p,i,points),++i}(points,fx,fy,that)))}constructor(points){this._delaunator=new Delaunator(points),this.inedges=new Int32Array(points.length/2),this._hullIndex=new Int32Array(points.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const d=this._delaunator,points=this.points;if(d.hull&&d.hull.length>2&&function collinear(d){const{triangles,coords}=d;for(let i=0;i<triangles.length;i+=3){const a=2*triangles[i],b=2*triangles[i+1],c=2*triangles[i+2];if((coords[c]-coords[a])*(coords[b+1]-coords[a+1])-(coords[b]-coords[a])*(coords[c+1]-coords[a+1])>1e-10)return!1}return!0}(d)){this.collinear=Int32Array.from({length:points.length/2},((_,i)=>i)).sort(((i,j)=>points[2*i]-points[2*j]||points[2*i+1]-points[2*j+1]));const e=this.collinear[0],f=this.collinear[this.collinear.length-1],bounds=[points[2*e],points[2*e+1],points[2*f],points[2*f+1]],r=1e-8*Math.hypot(bounds[3]-bounds[1],bounds[2]-bounds[0]);for(let i=0,n=points.length/2;i<n;++i){const p=jitter(points[2*i],points[2*i+1],r);points[2*i]=p[0],points[2*i+1]=p[1]}this._delaunator=new Delaunator(points)}else delete this.collinear;const halfedges=this.halfedges=this._delaunator.halfedges,hull=this.hull=this._delaunator.hull,triangles=this.triangles=this._delaunator.triangles,inedges=this.inedges.fill(-1),hullIndex=this._hullIndex.fill(-1);for(let e=0,n=halfedges.length;e<n;++e){const p=triangles[e%3==2?e-2:e+1];-1!==halfedges[e]&&-1!==inedges[p]||(inedges[p]=e)}for(let i=0,n=hull.length;i<n;++i)hullIndex[hull[i]]=i;hull.length<=2&&hull.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=hull[0],this.triangles[1]=hull[1],this.triangles[2]=hull[1],inedges[hull[0]]=1,2===hull.length&&(inedges[hull[1]]=0))}voronoi(bounds){return new Voronoi(this,bounds)}*neighbors(i){const{inedges,hull,_hullIndex,halfedges,triangles,collinear}=this;if(collinear){const l=collinear.indexOf(i);return l>0&&(yield collinear[l-1]),void(l<collinear.length-1&&(yield collinear[l+1]))}const e0=inedges[i];if(-1===e0)return;let e=e0,p0=-1;do{if(yield p0=triangles[e],e=e%3==2?e-2:e+1,triangles[e]!==i)return;if(e=halfedges[e],-1===e){const p=hull[(_hullIndex[i]+1)%hull.length];return void(p!==p0&&(yield p))}}while(e!==e0)}find(x,y,i=0){if((x=+x)!=x||(y=+y)!=y)return-1;const i0=i;let c;for(;(c=this._step(i,x,y))>=0&&c!==i&&c!==i0;)i=c;return c}_step(i,x,y){const{inedges,hull,_hullIndex,halfedges,triangles,points}=this;if(-1===inedges[i]||!points.length)return(i+1)%(points.length>>1);let c=i,dc=pow(x-points[2*i],2)+pow(y-points[2*i+1],2);const e0=inedges[i];let e=e0;do{let t=triangles[e];const dt=pow(x-points[2*t],2)+pow(y-points[2*t+1],2);if(dt<dc&&(dc=dt,c=t),e=e%3==2?e-2:e+1,triangles[e]!==i)break;if(e=halfedges[e],-1===e){if(e=hull[(_hullIndex[i]+1)%hull.length],e!==t&&pow(x-points[2*e],2)+pow(y-points[2*e+1],2)<dc)return e;break}}while(e!==e0);return c}render(context){const buffer=null==context?context=new Path:void 0,{points,halfedges,triangles}=this;for(let i=0,n=halfedges.length;i<n;++i){const j=halfedges[i];if(j<i)continue;const ti=2*triangles[i],tj=2*triangles[j];context.moveTo(points[ti],points[ti+1]),context.lineTo(points[tj],points[tj+1])}return this.renderHull(context),buffer&&buffer.value()}renderPoints(context,r=2){const buffer=null==context?context=new Path:void 0,{points}=this;for(let i=0,n=points.length;i<n;i+=2){const x=points[i],y=points[i+1];context.moveTo(x+r,y),context.arc(x,y,r,0,tau)}return buffer&&buffer.value()}renderHull(context){const buffer=null==context?context=new Path:void 0,{hull,points}=this,h=2*hull[0],n=hull.length;context.moveTo(points[h],points[h+1]);for(let i=1;i<n;++i){const h=2*hull[i];context.lineTo(points[h],points[h+1])}return context.closePath(),buffer&&buffer.value()}hullPolygon(){const polygon=new Polygon;return this.renderHull(polygon),polygon.value()}renderTriangle(i,context){const buffer=null==context?context=new Path:void 0,{points,triangles}=this,t0=2*triangles[i*=3],t1=2*triangles[i+1],t2=2*triangles[i+2];return context.moveTo(points[t0],points[t0+1]),context.lineTo(points[t1],points[t1+1]),context.lineTo(points[t2],points[t2+1]),context.closePath(),buffer&&buffer.value()}*trianglePolygons(){const{triangles}=this;for(let i=0,n=triangles.length/3;i<n;++i)yield this.trianglePolygon(i)}trianglePolygon(i){const polygon=new Polygon;return this.renderTriangle(i,polygon),polygon.value()}}}}]);