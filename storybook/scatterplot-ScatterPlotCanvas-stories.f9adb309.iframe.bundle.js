"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[2132],{"./stories/scatterplot/ScatterPlotCanvas.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AlternativeColors:()=>AlternativeColors,Basic:()=>Basic,CustomCanvasRef:()=>CustomCanvasRef,CustomTooltip:()=>CustomTooltip,MultipleSeries:()=>MultipleSeries,SymbolSize:()=>SymbolSize,SynchronizingCharts:()=>SynchronizingCharts,UsingLogarithmicScales:()=>UsingLogarithmicScales,UsingSymmetricLogarithmicScales:()=>UsingSymmetricLogarithmicScales,UsingTimeScales:()=>UsingTimeScales,VaryingSymbolSize:()=>VaryingSymbolSize,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),lodash_omit__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/omit.js"),lodash_omit__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(lodash_omit__WEBPACK_IMPORTED_MODULE_1__),_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../packages/scatterplot/dist/nivo-scatterplot.es.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"ScatterPlotCanvas",component:_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,tags:["autodocs"],argTypes:{onClick:{action:"clicked"}},onMouseEnter:{action:"mouseenter"},onMouseLeave:{action:"mouseleave"}},sampleData=[{id:"girls low",data:[{id:0,x:0,y:2},{id:1,x:1,y:2.1},{id:2,x:2,y:2.3},{id:3,x:3,y:2.5},{id:4,x:4,y:2.7},{id:5,x:5,y:2.9},{id:6,x:6,y:3},{id:7,x:7,y:3.2},{id:8,x:8,y:3.3},{id:9,x:9,y:3.5},{id:10,x:10,y:3.6},{id:11,x:11,y:3.8},{id:12,x:12,y:3.9},{id:13,x:13,y:4}]},{id:"girls med",data:[{id:0,x:0,y:3.2},{id:1,x:1,y:3.3},{id:2,x:2,y:3.6},{id:3,x:3,y:3.8},{id:4,x:4,y:4.1},{id:5,x:5,y:4.3},{id:6,x:6,y:4.6},{id:7,x:7,y:4.8},{id:8,x:8,y:5},{id:9,x:9,y:5.2},{id:10,x:10,y:5.4},{id:11,x:11,y:5.5},{id:12,x:12,y:5.7},{id:13,x:13,y:5.8}]},{id:"girls high",data:[{id:0,x:0,y:4.8},{id:1,x:1,y:5.1},{id:2,x:2,y:5.4},{id:3,x:3,y:5.7},{id:4,x:4,y:6.1},{id:5,x:5,y:6.5},{id:6,x:6,y:6.8},{id:7,x:7,y:7.1},{id:8,x:8,y:7.3},{id:9,x:9,y:7.6},{id:10,x:10,y:7.8},{id:11,x:11,y:8.1},{id:12,x:12,y:8.3},{id:13,x:13,y:8.5}]},{id:"boys low",data:[{id:0,x:0,y:2.5},{id:1,x:1,y:2.6},{id:2,x:2,y:2.8},{id:3,x:3,y:3.1},{id:4,x:4,y:3.3},{id:5,x:5,y:3.5},{id:6,x:6,y:3.8},{id:7,x:7,y:4},{id:8,x:8,y:4.2},{id:9,x:9,y:4.4},{id:10,x:10,y:4.5},{id:11,x:11,y:4.7},{id:12,x:12,y:4.9},{id:13,x:13,y:5}]},{id:"boys med",data:[{id:0,x:0,y:3.3},{id:1,x:1,y:3.5},{id:2,x:2,y:3.8},{id:3,x:3,y:4.1},{id:4,x:4,y:4.4},{id:5,x:5,y:4.7},{id:6,x:6,y:4.9},{id:7,x:7,y:5.2},{id:8,x:8,y:5.4},{id:9,x:9,y:5.6},{id:10,x:10,y:5.8},{id:11,x:11,y:6},{id:12,x:12,y:6.2},{id:13,x:13,y:6.4}]},{id:"boys high",data:[{id:0,x:0,y:5},{id:1,x:1,y:5.3},{id:2,x:2,y:5.6},{id:3,x:3,y:6},{id:4,x:4,y:6.4},{id:5,x:5,y:6.8},{id:6,x:6,y:7.2},{id:7,x:7,y:7.5},{id:8,x:8,y:7.8},{id:9,x:9,y:8},{id:10,x:10,y:8.3},{id:11,x:11,y:8.5},{id:12,x:12,y:8.8},{id:13,x:13,y:9}]}],commonProps={width:900,height:500,margin:{top:20,right:20,bottom:80,left:80},nodeSize:10,axisBottom:{format:x=>`week ${x}`},axisLeft:{format:y=>`${y} kg`},data:sampleData,useMesh:!0,legends:[{anchor:"bottom-left",direction:"row",translateY:60,itemWidth:130,itemHeight:12,nodeSize:12,symbolShape:"circle"}]},Basic={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,data:[sampleData[1]]})},MultipleSeries={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps})},AlternativeColors={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,colors:{scheme:"category10"}})},UsingTimeScales={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,data:[{id:"apples",data:[{x:"2018-01-01",y:7},{x:"2018-01-02",y:5},{x:"2018-01-03",y:11},{x:"2018-01-04",y:9},{x:"2018-01-05",y:12},{x:"2018-01-06",y:16},{x:"2018-01-07",y:13},{x:"2018-01-08",y:13}]},{id:"oranges",data:[{x:"2018-01-04",y:14},{x:"2018-01-05",y:14},{x:"2018-01-06",y:15},{x:"2018-01-07",y:11},{x:"2018-01-08",y:10},{x:"2018-01-09",y:12},{x:"2018-01-10",y:9},{x:"2018-01-11",y:7}]}],xScale:{type:"time",format:"%Y-%m-%d",precision:"day"},axisBottom:{format:"%b %d"}})},UsingLogarithmicScales={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,data:[{id:"apples",data:[{x:10,y:2},{x:220,y:4},{x:1e3,y:8},{x:1e4,y:16},{x:1e5,y:32},{x:1e6,y:64}]}],xScale:{type:"log",base:10},yScale:{type:"log",base:2},axisBottom:{tickValues:[10,100,1e3,1e3,1e4,1e5,1e6,1e7]},axisLeft:{tickValues:[2,4,8,16,32,64]}})},UsingSymmetricLogarithmicScales={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,data:[{id:"apples",data:[{x:1,y:1},{x:2,y:3},{x:4,y:32},{x:5,y:8},{x:2,y:38},{x:3,y:45}]}],xScale:{type:"linear"},xFormat:void 0,yScale:{type:"symlog"},yFormat:void 0,axisBottom:{tickValues:[0,1,2,3,4,5]}})},SymbolSize={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,nodeSize:24})},VaryingSymbolSize={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,nodeSize:d=>d.xValue+2*d.yValue})},SyncCharts=()=>{const[nodeId,setNodeId]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),handleMouseMove=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((node=>setNodeId(node.id)),[setNodeId]),handleMouseLeave=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((()=>setNodeId(null)),[setNodeId]),getNodeSize=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>node=>null!==nodeId&&nodeId===node.id?46:8),[nodeId]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{style:{display:"grid",gridTemplateColumns:"1fr 1fr"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{style:{height:400},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.vZ,{...lodash_omit__WEBPACK_IMPORTED_MODULE_1___default()(commonProps,["width","height","legends"]),useMesh:!0,debugMesh:!0,colors:{scheme:"nivo"},nodeSize:getNodeSize,onMouseMove:handleMouseMove,onMouseLeave:handleMouseLeave,axisBottom:{tickRotation:-90,format:d=>`week ${d}`}})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{style:{height:400},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.vZ,{...lodash_omit__WEBPACK_IMPORTED_MODULE_1___default()(commonProps,["width","height","legends"]),useMesh:!0,debugMesh:!0,colors:{scheme:"accent"},nodeSize:getNodeSize,onMouseMove:handleMouseMove,onMouseLeave:handleMouseLeave,axisLeft:null,axisBottom:{tickRotation:-90,format:d=>`week ${d}`}})})]})};SyncCharts.displayName="SyncCharts";const SynchronizingCharts={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SyncCharts,{})},CustomTooltip=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,tooltip:({node})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{style:{color:node.color,background:"#333",padding:"12px 16px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("strong",{children:[node.id," (",node.serieId,")"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("br",{}),`x: ${node.formattedX}`,(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("br",{}),`y: ${node.formattedY}`]})});CustomTooltip.displayName="CustomTooltip";const CustomCanvasRef=()=>{const ref=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_nivo_scatterplot__WEBPACK_IMPORTED_MODULE_2__.YW,{...commonProps,ref,tooltip:({node})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{style:{color:node.color,background:"#333",padding:"12px 16px"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("strong",{children:[node.id," (",node.serieId,")"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("br",{}),`x: ${node.formattedX}`,(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("br",{}),`y: ${node.formattedY}`]})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("button",{onClick:()=>(ref=>{const canvas=ref.current,link=document.createElement("a");link.download="test.png",link.href=canvas.toDataURL("image/png"),link.click()})(ref),children:"Download PNG"})]})};Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"{\n  render: () => <ScatterPlotCanvas<SampleDatum> {...commonProps} data={[sampleData[1]]} />\n}",...Basic.parameters?.docs?.source}}},MultipleSeries.parameters={...MultipleSeries.parameters,docs:{...MultipleSeries.parameters?.docs,source:{originalSource:"{\n  render: () => <ScatterPlotCanvas<SampleDatum> {...commonProps} />\n}",...MultipleSeries.parameters?.docs?.source}}},AlternativeColors.parameters={...AlternativeColors.parameters,docs:{...AlternativeColors.parameters?.docs,source:{originalSource:"{\n  render: () => <ScatterPlotCanvas<SampleDatum> {...commonProps} colors={{\n    scheme: 'category10'\n  }} />\n}",...AlternativeColors.parameters?.docs?.source}}},UsingTimeScales.parameters={...UsingTimeScales.parameters,docs:{...UsingTimeScales.parameters?.docs,source:{originalSource:"{\n  render: () => <ScatterPlotCanvas<{\n    x: string;\n    y: number;\n  }> {...commonProps} data={[{\n    id: 'apples',\n    data: [{\n      x: '2018-01-01',\n      y: 7\n    }, {\n      x: '2018-01-02',\n      y: 5\n    }, {\n      x: '2018-01-03',\n      y: 11\n    }, {\n      x: '2018-01-04',\n      y: 9\n    }, {\n      x: '2018-01-05',\n      y: 12\n    }, {\n      x: '2018-01-06',\n      y: 16\n    }, {\n      x: '2018-01-07',\n      y: 13\n    }, {\n      x: '2018-01-08',\n      y: 13\n    }]\n  }, {\n    id: 'oranges',\n    data: [{\n      x: '2018-01-04',\n      y: 14\n    }, {\n      x: '2018-01-05',\n      y: 14\n    }, {\n      x: '2018-01-06',\n      y: 15\n    }, {\n      x: '2018-01-07',\n      y: 11\n    }, {\n      x: '2018-01-08',\n      y: 10\n    }, {\n      x: '2018-01-09',\n      y: 12\n    }, {\n      x: '2018-01-10',\n      y: 9\n    }, {\n      x: '2018-01-11',\n      y: 7\n    }]\n  }]} xScale={{\n    type: 'time',\n    format: '%Y-%m-%d',\n    precision: 'day'\n  }} axisBottom={{\n    format: '%b %d'\n  }} />\n}",...UsingTimeScales.parameters?.docs?.source}}},UsingLogarithmicScales.parameters={...UsingLogarithmicScales.parameters,docs:{...UsingLogarithmicScales.parameters?.docs,source:{originalSource:"{\n  render: () => <ScatterPlotCanvas {...commonProps} data={[{\n    id: 'apples',\n    data: [{\n      x: 10,\n      y: 2\n    }, {\n      x: 220,\n      y: 4\n    }, {\n      x: 1000,\n      y: 8\n    }, {\n      x: 10000,\n      y: 16\n    }, {\n      x: 100000,\n      y: 32\n    }, {\n      x: 1000000,\n      y: 64\n    }]\n  }]} xScale={{\n    type: 'log',\n    base: 10\n  }} yScale={{\n    type: 'log',\n    base: 2\n  }} axisBottom={{\n    tickValues: [10, 100, 1000, 1000, 10000, 100000, 1000000, 10000000]\n  }} axisLeft={{\n    tickValues: [2, 4, 8, 16, 32, 64]\n  }} />\n}",...UsingLogarithmicScales.parameters?.docs?.source}}},UsingSymmetricLogarithmicScales.parameters={...UsingSymmetricLogarithmicScales.parameters,docs:{...UsingSymmetricLogarithmicScales.parameters?.docs,source:{originalSource:"{\n  render: () => <ScatterPlotCanvas {...commonProps} data={[{\n    id: 'apples',\n    data: [{\n      x: 1,\n      y: 1\n    }, {\n      x: 2,\n      y: 3\n    }, {\n      x: 4,\n      y: 32\n    }, {\n      x: 5,\n      y: 8\n    }, {\n      x: 2,\n      y: 38\n    }, {\n      x: 3,\n      y: 45\n    }]\n  }]} xScale={{\n    type: 'linear'\n  }} xFormat={undefined} yScale={{\n    type: 'symlog'\n  }} yFormat={undefined} axisBottom={{\n    tickValues: [0, 1, 2, 3, 4, 5]\n  }} />\n}",...UsingSymmetricLogarithmicScales.parameters?.docs?.source}}},SymbolSize.parameters={...SymbolSize.parameters,docs:{...SymbolSize.parameters?.docs,source:{originalSource:"{\n  render: () => <ScatterPlotCanvas<SampleDatum> {...commonProps} nodeSize={24} />\n}",...SymbolSize.parameters?.docs?.source}}},VaryingSymbolSize.parameters={...VaryingSymbolSize.parameters,docs:{...VaryingSymbolSize.parameters?.docs,source:{originalSource:"{\n  render: () => <ScatterPlotCanvas<SampleDatum> {...commonProps} nodeSize={d => d.xValue + d.yValue * 2} />\n}",...VaryingSymbolSize.parameters?.docs?.source}}},SynchronizingCharts.parameters={...SynchronizingCharts.parameters,docs:{...SynchronizingCharts.parameters?.docs,source:{originalSource:"{\n  render: () => <SyncCharts />\n}",...SynchronizingCharts.parameters?.docs?.source},description:{story:"You can synchronize several charts using mouse handlers.\nThis example wraps 2 scatterplots in a parent component and\nstore current symbol id in a state which is then used to\ndetermine symbol size, using `onMouseMove`, `onMouseLeave`\nand a custom function for `nodeSize`.\n\nNote that `debugMesh` is enabled on this example\nhence the extra red lines displayed on the chart.\n\nThe parent component hooks should look like this:\n\n```\nconst [nodeId, setNodeId] = useState(null)\nconst handleMouseMove = useCallback((node) => setNodeId(node.id), [setNodeId])\nconst handleMouseLeave = useCallback(() => setNodeId(null), [setNodeId])\nconst getNodeSize = useMemo(\n    () => node => {\n        if (nodeId !== null && nodeId === node.id) return 46\n        return 8\n    },\n    [nodeId]\n)\n```\n\nand the two scatterplots share those properties:\n\n```\n<ResponsiveScatterPlotCanvas\n    // other required props\n    nodeSize={getNodeSize}\n    onMouseMove={handleMouseMove}\n    onMouseLeave={handleMouseLeave}\n/>\n```\n\nThis approach can also be used to synchronize another chart type.",...SynchronizingCharts.parameters?.docs?.description}}},CustomTooltip.parameters={...CustomTooltip.parameters,docs:{...CustomTooltip.parameters?.docs,source:{originalSource:"() => <ScatterPlotCanvas<SampleDatum> {...commonProps} tooltip={({\n  node\n}) => <div style={{\n  color: node.color,\n  background: '#333',\n  padding: '12px 16px'\n}}>\n                <strong>\n                    {node.id} ({node.serieId})\n                </strong>\n                <br />\n                {`x: ${node.formattedX}`}\n                <br />\n                {`y: ${node.formattedY}`}\n            </div>} />",...CustomTooltip.parameters?.docs?.source}}},CustomCanvasRef.parameters={...CustomCanvasRef.parameters,docs:{...CustomCanvasRef.parameters?.docs,source:{originalSource:"() => {\n  const ref = useRef(undefined);\n  const download = ref => {\n    const canvas = ref.current;\n    const link = document.createElement('a');\n    link.download = 'test.png';\n    link.href = canvas.toDataURL('image/png');\n    link.click();\n  };\n  return <>\n            <ScatterPlotCanvas<SampleDatum> {...commonProps} ref={ref} tooltip={({\n      node\n    }) => <div style={{\n      color: node.color,\n      background: '#333',\n      padding: '12px 16px'\n    }}>\n                        <strong>\n                            {node.id} ({node.serieId})\n                        </strong>\n                        <br />\n                        {`x: ${node.formattedX}`}\n                        <br />\n                        {`y: ${node.formattedY}`}\n                    </div>} />\n            <button onClick={() => download(ref)}>Download PNG</button>\n        </>;\n}",...CustomCanvasRef.parameters?.docs?.source}}};const __namedExportsOrder=["Basic","MultipleSeries","AlternativeColors","UsingTimeScales","UsingLogarithmicScales","UsingSymmetricLogarithmicScales","SymbolSize","VaryingSymbolSize","SynchronizingCharts","CustomTooltip","CustomCanvasRef"];try{SynchronizingCharts.displayName="SynchronizingCharts",SynchronizingCharts.__docgenInfo={description:"You can synchronize several charts using mouse handlers.\nThis example wraps 2 scatterplots in a parent component and\nstore current symbol id in a state which is then used to\ndetermine symbol size, using `onMouseMove`, `onMouseLeave`\nand a custom function for `nodeSize`.\n\nNote that `debugMesh` is enabled on this example\nhence the extra red lines displayed on the chart.\n\nThe parent component hooks should look like this:\n\n```\nconst [nodeId, setNodeId] = useState(null)\nconst handleMouseMove = useCallback((node) => setNodeId(node.id), [setNodeId])\nconst handleMouseLeave = useCallback(() => setNodeId(null), [setNodeId])\nconst getNodeSize = useMemo(\n    () => node => {\n        if (nodeId !== null && nodeId === node.id) return 46\n        return 8\n    },\n    [nodeId]\n)\n```\n\nand the two scatterplots share those properties:\n\n```\n<ResponsiveScatterPlotCanvas\n    // other required props\n    nodeSize={getNodeSize}\n    onMouseMove={handleMouseMove}\n    onMouseLeave={handleMouseLeave}\n/>\n```\n\nThis approach can also be used to synchronize another chart type.",displayName:"SynchronizingCharts",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/scatterplot/ScatterPlotCanvas.stories.tsx#SynchronizingCharts"]={docgenInfo:SynchronizingCharts.__docgenInfo,name:"SynchronizingCharts",path:"stories/scatterplot/ScatterPlotCanvas.stories.tsx#SynchronizingCharts"})}catch(__react_docgen_typescript_loader_error){}}}]);